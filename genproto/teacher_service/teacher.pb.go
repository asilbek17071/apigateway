// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teacher.proto

package teacher_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EmptyRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyRes) Reset()         { *m = EmptyRes{} }
func (m *EmptyRes) String() string { return proto.CompactTextString(m) }
func (*EmptyRes) ProtoMessage()    {}
func (*EmptyRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c4d93a072aeccf3, []int{0}
}
func (m *EmptyRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRes.Merge(m, src)
}
func (m *EmptyRes) XXX_Size() int {
	return m.Size()
}
func (m *EmptyRes) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRes.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRes proto.InternalMessageInfo

type TTT struct {
	Permission           string   `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TTT) Reset()         { *m = TTT{} }
func (m *TTT) String() string { return proto.CompactTextString(m) }
func (*TTT) ProtoMessage()    {}
func (*TTT) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c4d93a072aeccf3, []int{1}
}
func (m *TTT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TTT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TTT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TTT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TTT.Merge(m, src)
}
func (m *TTT) XXX_Size() int {
	return m.Size()
}
func (m *TTT) XXX_DiscardUnknown() {
	xxx_messageInfo_TTT.DiscardUnknown(m)
}

var xxx_messageInfo_TTT proto.InternalMessageInfo

func (m *TTT) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

type Name struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Name) Reset()         { *m = Name{} }
func (m *Name) String() string { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()    {}
func (*Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c4d93a072aeccf3, []int{2}
}
func (m *Name) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Name.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Name.Merge(m, src)
}
func (m *Name) XXX_Size() int {
	return m.Size()
}
func (m *Name) XXX_DiscardUnknown() {
	xxx_messageInfo_Name.DiscardUnknown(m)
}

var xxx_messageInfo_Name proto.InternalMessageInfo

func (m *Name) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Name) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type NameResp struct {
	Teacher              []*Name  `protobuf:"bytes,1,rep,name=teacher,proto3" json:"teacher"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameResp) Reset()         { *m = NameResp{} }
func (m *NameResp) String() string { return proto.CompactTextString(m) }
func (*NameResp) ProtoMessage()    {}
func (*NameResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c4d93a072aeccf3, []int{3}
}
func (m *NameResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameResp.Merge(m, src)
}
func (m *NameResp) XXX_Size() int {
	return m.Size()
}
func (m *NameResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NameResp.DiscardUnknown(m)
}

var xxx_messageInfo_NameResp proto.InternalMessageInfo

func (m *NameResp) GetTeacher() []*Name {
	if m != nil {
		return m.Teacher
	}
	return nil
}

type Teacher struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	FullName             string   `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password"`
	Email                string   `protobuf:"bytes,4,opt,name=email,proto3" json:"email"`
	Birthday             string   `protobuf:"bytes,5,opt,name=birthday,proto3" json:"birthday"`
	Gender               string   `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender"`
	Phone1               string   `protobuf:"bytes,7,opt,name=phone1,proto3" json:"phone1"`
	Phone2               string   `protobuf:"bytes,8,opt,name=phone2,proto3" json:"phone2"`
	Permission           string   `protobuf:"bytes,9,opt,name=permission,proto3" json:"permission"`
	WorkingDay           string   `protobuf:"bytes,10,opt,name=working_day,json=workingDay,proto3" json:"working_day"`
	Address              string   `protobuf:"bytes,11,opt,name=address,proto3" json:"address"`
	PassportSeries       string   `protobuf:"bytes,12,opt,name=passport_series,json=passportSeries,proto3" json:"passport_series"`
	PassportImage1       string   `protobuf:"bytes,13,opt,name=passport_image1,json=passportImage1,proto3" json:"passport_image1"`
	PassportImage2       string   `protobuf:"bytes,14,opt,name=passport_image2,json=passportImage2,proto3" json:"passport_image2"`
	Image                string   `protobuf:"bytes,15,opt,name=image,proto3" json:"image"`
	BranchId             string   `protobuf:"bytes,16,opt,name=branch_id,json=branchId,proto3" json:"branch_id"`
	DirectionId          string   `protobuf:"bytes,17,opt,name=direction_id,json=directionId,proto3" json:"direction_id"`
	CreatedAt            string   `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Teacher) Reset()         { *m = Teacher{} }
func (m *Teacher) String() string { return proto.CompactTextString(m) }
func (*Teacher) ProtoMessage()    {}
func (*Teacher) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c4d93a072aeccf3, []int{4}
}
func (m *Teacher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Teacher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Teacher.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Teacher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Teacher.Merge(m, src)
}
func (m *Teacher) XXX_Size() int {
	return m.Size()
}
func (m *Teacher) XXX_DiscardUnknown() {
	xxx_messageInfo_Teacher.DiscardUnknown(m)
}

var xxx_messageInfo_Teacher proto.InternalMessageInfo

func (m *Teacher) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Teacher) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *Teacher) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Teacher) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Teacher) GetBirthday() string {
	if m != nil {
		return m.Birthday
	}
	return ""
}

func (m *Teacher) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *Teacher) GetPhone1() string {
	if m != nil {
		return m.Phone1
	}
	return ""
}

func (m *Teacher) GetPhone2() string {
	if m != nil {
		return m.Phone2
	}
	return ""
}

func (m *Teacher) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

func (m *Teacher) GetWorkingDay() string {
	if m != nil {
		return m.WorkingDay
	}
	return ""
}

func (m *Teacher) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Teacher) GetPassportSeries() string {
	if m != nil {
		return m.PassportSeries
	}
	return ""
}

func (m *Teacher) GetPassportImage1() string {
	if m != nil {
		return m.PassportImage1
	}
	return ""
}

func (m *Teacher) GetPassportImage2() string {
	if m != nil {
		return m.PassportImage2
	}
	return ""
}

func (m *Teacher) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Teacher) GetBranchId() string {
	if m != nil {
		return m.BranchId
	}
	return ""
}

func (m *Teacher) GetDirectionId() string {
	if m != nil {
		return m.DirectionId
	}
	return ""
}

func (m *Teacher) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Teacher) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type TeacherSalary struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Amount               string   `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	Commnet              string   `protobuf:"bytes,3,opt,name=commnet,proto3" json:"commnet"`
	DateOfBegin          string   `protobuf:"bytes,4,opt,name=date_of_begin,json=dateOfBegin,proto3" json:"date_of_begin"`
	TeacherId            string   `protobuf:"bytes,5,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id"`
	CreatedAt            string   `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeacherSalary) Reset()         { *m = TeacherSalary{} }
func (m *TeacherSalary) String() string { return proto.CompactTextString(m) }
func (*TeacherSalary) ProtoMessage()    {}
func (*TeacherSalary) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c4d93a072aeccf3, []int{5}
}
func (m *TeacherSalary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherSalary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherSalary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherSalary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherSalary.Merge(m, src)
}
func (m *TeacherSalary) XXX_Size() int {
	return m.Size()
}
func (m *TeacherSalary) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherSalary.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherSalary proto.InternalMessageInfo

func (m *TeacherSalary) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TeacherSalary) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *TeacherSalary) GetCommnet() string {
	if m != nil {
		return m.Commnet
	}
	return ""
}

func (m *TeacherSalary) GetDateOfBegin() string {
	if m != nil {
		return m.DateOfBegin
	}
	return ""
}

func (m *TeacherSalary) GetTeacherId() string {
	if m != nil {
		return m.TeacherId
	}
	return ""
}

func (m *TeacherSalary) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *TeacherSalary) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type TeacherSalaryListResp struct {
	Salary               []*TeacherSalary `protobuf:"bytes,1,rep,name=salary,proto3" json:"salary"`
	Count                int64            `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TeacherSalaryListResp) Reset()         { *m = TeacherSalaryListResp{} }
func (m *TeacherSalaryListResp) String() string { return proto.CompactTextString(m) }
func (*TeacherSalaryListResp) ProtoMessage()    {}
func (*TeacherSalaryListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c4d93a072aeccf3, []int{6}
}
func (m *TeacherSalaryListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherSalaryListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherSalaryListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherSalaryListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherSalaryListResp.Merge(m, src)
}
func (m *TeacherSalaryListResp) XXX_Size() int {
	return m.Size()
}
func (m *TeacherSalaryListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherSalaryListResp.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherSalaryListResp proto.InternalMessageInfo

func (m *TeacherSalaryListResp) GetSalary() []*TeacherSalary {
	if m != nil {
		return m.Salary
	}
	return nil
}

func (m *TeacherSalaryListResp) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type TeacherLoginResp struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token"`
	Whoami               string   `protobuf:"bytes,3,opt,name=whoami,proto3" json:"whoami"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeacherLoginResp) Reset()         { *m = TeacherLoginResp{} }
func (m *TeacherLoginResp) String() string { return proto.CompactTextString(m) }
func (*TeacherLoginResp) ProtoMessage()    {}
func (*TeacherLoginResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c4d93a072aeccf3, []int{7}
}
func (m *TeacherLoginResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherLoginResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherLoginResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherLoginResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherLoginResp.Merge(m, src)
}
func (m *TeacherLoginResp) XXX_Size() int {
	return m.Size()
}
func (m *TeacherLoginResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherLoginResp.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherLoginResp proto.InternalMessageInfo

func (m *TeacherLoginResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *TeacherLoginResp) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TeacherLoginResp) GetWhoami() string {
	if m != nil {
		return m.Whoami
	}
	return ""
}

type TeacherListResp struct {
	Teachers             []*Teacher `protobuf:"bytes,1,rep,name=teachers,proto3" json:"teachers"`
	Count                int64      `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TeacherListResp) Reset()         { *m = TeacherListResp{} }
func (m *TeacherListResp) String() string { return proto.CompactTextString(m) }
func (*TeacherListResp) ProtoMessage()    {}
func (*TeacherListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c4d93a072aeccf3, []int{8}
}
func (m *TeacherListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherListResp.Merge(m, src)
}
func (m *TeacherListResp) XXX_Size() int {
	return m.Size()
}
func (m *TeacherListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherListResp.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherListResp proto.InternalMessageInfo

func (m *TeacherListResp) GetTeachers() []*Teacher {
	if m != nil {
		return m.Teachers
	}
	return nil
}

func (m *TeacherListResp) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type LoginReq struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginReq) Reset()         { *m = LoginReq{} }
func (m *LoginReq) String() string { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()    {}
func (*LoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c4d93a072aeccf3, []int{9}
}
func (m *LoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReq.Merge(m, src)
}
func (m *LoginReq) XXX_Size() int {
	return m.Size()
}
func (m *LoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReq proto.InternalMessageInfo

func (m *LoginReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ListReq struct {
	Permission           string   `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission"`
	Page                 int64    `protobuf:"varint,2,opt,name=page,proto3" json:"page"`
	Limit                int64    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListReq) Reset()         { *m = ListReq{} }
func (m *ListReq) String() string { return proto.CompactTextString(m) }
func (*ListReq) ProtoMessage()    {}
func (*ListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c4d93a072aeccf3, []int{10}
}
func (m *ListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReq.Merge(m, src)
}
func (m *ListReq) XXX_Size() int {
	return m.Size()
}
func (m *ListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListReq proto.InternalMessageInfo

func (m *ListReq) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

func (m *ListReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SalaryReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SalaryReq) Reset()         { *m = SalaryReq{} }
func (m *SalaryReq) String() string { return proto.CompactTextString(m) }
func (*SalaryReq) ProtoMessage()    {}
func (*SalaryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c4d93a072aeccf3, []int{11}
}
func (m *SalaryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SalaryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SalaryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SalaryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SalaryReq.Merge(m, src)
}
func (m *SalaryReq) XXX_Size() int {
	return m.Size()
}
func (m *SalaryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SalaryReq.DiscardUnknown(m)
}

var xxx_messageInfo_SalaryReq proto.InternalMessageInfo

func (m *SalaryReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Token struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c4d93a072aeccf3, []int{12}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return m.Size()
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ByIdReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByIdReq) Reset()         { *m = ByIdReq{} }
func (m *ByIdReq) String() string { return proto.CompactTextString(m) }
func (*ByIdReq) ProtoMessage()    {}
func (*ByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c4d93a072aeccf3, []int{13}
}
func (m *ByIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ByIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ByIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ByIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByIdReq.Merge(m, src)
}
func (m *ByIdReq) XXX_Size() int {
	return m.Size()
}
func (m *ByIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ByIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_ByIdReq proto.InternalMessageInfo

func (m *ByIdReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*EmptyRes)(nil), "teacher_service.EmptyRes")
	proto.RegisterType((*TTT)(nil), "teacher_service.TTT")
	proto.RegisterType((*Name)(nil), "teacher_service.Name")
	proto.RegisterType((*NameResp)(nil), "teacher_service.NameResp")
	proto.RegisterType((*Teacher)(nil), "teacher_service.Teacher")
	proto.RegisterType((*TeacherSalary)(nil), "teacher_service.TeacherSalary")
	proto.RegisterType((*TeacherSalaryListResp)(nil), "teacher_service.TeacherSalaryListResp")
	proto.RegisterType((*TeacherLoginResp)(nil), "teacher_service.TeacherLoginResp")
	proto.RegisterType((*TeacherListResp)(nil), "teacher_service.TeacherListResp")
	proto.RegisterType((*LoginReq)(nil), "teacher_service.LoginReq")
	proto.RegisterType((*ListReq)(nil), "teacher_service.ListReq")
	proto.RegisterType((*SalaryReq)(nil), "teacher_service.SalaryReq")
	proto.RegisterType((*Token)(nil), "teacher_service.Token")
	proto.RegisterType((*ByIdReq)(nil), "teacher_service.ByIdReq")
}

func init() { proto.RegisterFile("teacher.proto", fileDescriptor_6c4d93a072aeccf3) }

var fileDescriptor_6c4d93a072aeccf3 = []byte{
	// 874 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x6e, 0xeb, 0x44,
	0x10, 0xc6, 0x49, 0x1a, 0x3b, 0x93, 0x26, 0xe9, 0xd9, 0xd3, 0x56, 0xdb, 0x54, 0x0d, 0xad, 0x25,
	0xa0, 0xe2, 0xa2, 0xa8, 0x01, 0x71, 0x03, 0x17, 0x6d, 0x5a, 0x84, 0x82, 0x22, 0x40, 0x6e, 0x2a,
	0xae, 0x50, 0xb4, 0x89, 0xb7, 0xc9, 0x2a, 0xb1, 0xd7, 0xb5, 0x5d, 0xaa, 0xbc, 0x09, 0x4f, 0xc2,
	0x33, 0x70, 0x89, 0x78, 0x02, 0x28, 0x2f, 0x82, 0xf6, 0xc7, 0x6e, 0x62, 0xe7, 0x47, 0x3a, 0xbd,
	0xf3, 0x7c, 0x33, 0x3b, 0x3b, 0xf3, 0xcd, 0x37, 0x9b, 0x40, 0x2d, 0xa6, 0x64, 0x34, 0xa1, 0xe1,
	0x45, 0x10, 0xf2, 0x98, 0xa3, 0x86, 0x36, 0x07, 0x11, 0x0d, 0x7f, 0x63, 0x23, 0x6a, 0x03, 0x58,
	0xdf, 0x79, 0x41, 0x3c, 0x77, 0x68, 0x64, 0x7f, 0x02, 0xc5, 0x7e, 0xbf, 0x8f, 0x5a, 0x00, 0x01,
	0x0d, 0x3d, 0x16, 0x45, 0x8c, 0xfb, 0xd8, 0x38, 0x35, 0xce, 0x2b, 0xce, 0x02, 0x62, 0x7f, 0x0e,
	0xa5, 0x1f, 0x89, 0x47, 0x51, 0x1d, 0x0a, 0xcc, 0xd5, 0xfe, 0x02, 0x73, 0x11, 0x82, 0x92, 0x4f,
	0x3c, 0x8a, 0x0b, 0x12, 0x91, 0xdf, 0xf6, 0x37, 0x60, 0x89, 0x58, 0x87, 0x46, 0x01, 0xfa, 0x02,
	0x4c, 0x7d, 0x3b, 0x36, 0x4e, 0x8b, 0xe7, 0xd5, 0xf6, 0xc1, 0x45, 0xa6, 0x9a, 0x0b, 0x19, 0x9b,
	0x44, 0xd9, 0x7f, 0x94, 0xc0, 0xec, 0xab, 0xef, 0xdc, 0x65, 0xc7, 0x50, 0x79, 0x78, 0x9a, 0xcd,
	0x06, 0x0b, 0x37, 0x5a, 0x02, 0x90, 0x95, 0x35, 0xc1, 0x0a, 0x48, 0x14, 0x3d, 0xf3, 0xd0, 0xc5,
	0x45, 0xe5, 0x4b, 0x6c, 0xb4, 0x0f, 0x3b, 0xd4, 0x23, 0x6c, 0x86, 0x4b, 0xd2, 0xa1, 0x0c, 0x71,
	0x62, 0xc8, 0xc2, 0x78, 0xe2, 0x92, 0x39, 0xde, 0x51, 0x27, 0x12, 0x1b, 0x1d, 0x42, 0x79, 0x4c,
	0x7d, 0x97, 0x86, 0xb8, 0x2c, 0x3d, 0xda, 0x12, 0x78, 0x30, 0xe1, 0x3e, 0xbd, 0xc4, 0xa6, 0xc2,
	0x95, 0x95, 0xe2, 0x6d, 0x6c, 0x2d, 0xe0, 0xed, 0x0c, 0xaf, 0x95, 0x2c, 0xaf, 0xe8, 0x63, 0xa8,
	0x3e, 0xf3, 0x70, 0xca, 0xfc, 0xf1, 0x40, 0x94, 0x01, 0x2a, 0x40, 0x43, 0xb7, 0x64, 0x8e, 0x30,
	0x98, 0xc4, 0x75, 0x43, 0x1a, 0x45, 0xb8, 0x2a, 0x9d, 0x89, 0x89, 0x3e, 0x83, 0x86, 0x68, 0x30,
	0xe0, 0x61, 0x2c, 0xb8, 0x64, 0x34, 0xc2, 0xbb, 0x32, 0xa2, 0x9e, 0xc0, 0x77, 0x12, 0x5d, 0x0a,
	0x64, 0x1e, 0x19, 0xd3, 0x4b, 0x5c, 0x5b, 0x0e, 0xec, 0x4a, 0x34, 0x1f, 0xd8, 0xc6, 0xf5, 0x15,
	0x81, 0x6d, 0xc1, 0xa7, 0xf4, 0xe3, 0x86, 0xe2, 0x53, 0x1a, 0x62, 0x3c, 0xc3, 0x90, 0xf8, 0xa3,
	0xc9, 0x80, 0xb9, 0x78, 0x4f, 0x13, 0x2a, 0x81, 0xae, 0x8b, 0xce, 0x60, 0xd7, 0x65, 0x21, 0x1d,
	0xc5, 0x8c, 0xfb, 0xc2, 0xff, 0x4e, 0xfa, 0xab, 0x29, 0xd6, 0x75, 0xd1, 0x09, 0xc0, 0x28, 0xa4,
	0x24, 0xa6, 0xee, 0x80, 0xc4, 0x18, 0xc9, 0x80, 0x8a, 0x46, 0xae, 0x63, 0xe1, 0x7e, 0x0a, 0xdc,
	0xc4, 0xfd, 0x5e, 0xb9, 0x35, 0x72, 0x1d, 0xdb, 0x7f, 0x1b, 0x50, 0xd3, 0xc2, 0xb9, 0x23, 0x33,
	0x12, 0xce, 0x73, 0xf2, 0x39, 0x84, 0x32, 0xf1, 0xf8, 0x93, 0x1f, 0x6b, 0xed, 0x68, 0x4b, 0x50,
	0x3c, 0xe2, 0x9e, 0xe7, 0xd3, 0x58, 0x0b, 0x27, 0x31, 0x91, 0x0d, 0x35, 0x91, 0x7e, 0xc0, 0x1f,
	0x06, 0x43, 0x3a, 0x66, 0xbe, 0xd6, 0x4f, 0x55, 0x80, 0x3f, 0x3d, 0x74, 0x04, 0x24, 0xca, 0x4a,
	0x14, 0xcd, 0x5c, 0xad, 0xa3, 0x8a, 0x46, 0x72, 0x4d, 0x95, 0x37, 0x37, 0x65, 0x66, 0x9b, 0xa2,
	0x70, 0xb0, 0xd4, 0x53, 0x8f, 0x45, 0xb1, 0xdc, 0xab, 0xaf, 0xa1, 0x1c, 0x49, 0x44, 0xaf, 0x55,
	0x2b, 0xb7, 0x56, 0x4b, 0xe7, 0x1c, 0x1d, 0x2d, 0x26, 0x37, 0x4a, 0x29, 0x28, 0x3a, 0xca, 0xb0,
	0x7f, 0x86, 0x3d, 0x1d, 0xde, 0xe3, 0x63, 0xe6, 0xcb, 0x1b, 0xea, 0x50, 0xe0, 0x53, 0xc9, 0x9e,
	0xe5, 0x14, 0xf8, 0x54, 0x9c, 0x8c, 0xf9, 0x94, 0xfa, 0x9a, 0x3c, 0x65, 0x08, 0x4e, 0x9f, 0x27,
	0x9c, 0x78, 0x4c, 0x53, 0xa7, 0x2d, 0xfb, 0x57, 0x68, 0x24, 0x19, 0x93, 0x92, 0xbf, 0x02, 0x4b,
	0xd7, 0x18, 0xe9, 0xa2, 0xf1, 0xba, 0xa2, 0x9d, 0x34, 0x72, 0x4d, 0xc1, 0xdf, 0x82, 0xa5, 0x2b,
	0x7d, 0x7c, 0x5d, 0x6e, 0x23, 0xb3, 0xdc, 0xe9, 0x73, 0x50, 0x58, 0x7e, 0x0e, 0xec, 0x3b, 0x30,
	0x55, 0x55, 0x8f, 0xdb, 0xde, 0x3d, 0xf1, 0xbe, 0x05, 0x42, 0xe8, 0xea, 0x76, 0xf9, 0x2d, 0x2e,
	0x9c, 0x31, 0x8f, 0x29, 0xb5, 0x14, 0x1d, 0x65, 0xd8, 0xc7, 0x50, 0xd1, 0x5c, 0xd3, 0xc7, 0xac,
	0xf4, 0xec, 0x13, 0xd8, 0xe9, 0x4b, 0xbe, 0x52, 0x16, 0x8d, 0x05, 0x16, 0xed, 0x23, 0x30, 0x3b,
	0xf3, 0xae, 0xbb, 0xe2, 0x64, 0xfb, 0x5f, 0x13, 0xea, 0xc9, 0x28, 0x15, 0x49, 0xe8, 0x26, 0x15,
	0xfa, 0x8d, 0xd4, 0x11, 0x5a, 0xcb, 0x63, 0x73, 0xad, 0x07, 0x5d, 0x01, 0xe8, 0xcf, 0xef, 0x69,
	0xbc, 0x22, 0x83, 0xae, 0x67, 0x43, 0x86, 0xeb, 0xd7, 0x7d, 0x63, 0x63, 0xff, 0x3e, 0x40, 0x87,
	0xf9, 0x50, 0xd1, 0xdd, 0x86, 0x14, 0x5d, 0xa8, 0x2e, 0xa8, 0x64, 0x45, 0x15, 0x7a, 0x4c, 0xcd,
	0xd3, 0x75, 0x29, 0x52, 0x75, 0xf5, 0x60, 0x77, 0x51, 0xc2, 0xe8, 0x28, 0x9f, 0x4b, 0x0b, 0xa6,
	0x79, 0xb6, 0x36, 0x59, 0x2a, 0xfe, 0x57, 0x8a, 0xef, 0xe5, 0x2e, 0x7e, 0x10, 0xc5, 0xb7, 0x69,
	0x92, 0x5b, 0x3a, 0xa3, 0x2b, 0x93, 0x24, 0x2c, 0xe7, 0xab, 0x4d, 0x7e, 0xa0, 0xd1, 0x3d, 0xbc,
	0x5f, 0x5a, 0x65, 0x3d, 0xf3, 0x2d, 0x0b, 0xdf, 0xdc, 0xe2, 0x47, 0xbd, 0x74, 0xe5, 0x15, 0xb0,
	0x59, 0x05, 0xdb, 0xb2, 0xfd, 0x02, 0xef, 0x72, 0xef, 0x14, 0x6a, 0xe6, 0x0e, 0xa5, 0x0b, 0xd2,
	0xfc, 0x74, 0x73, 0xc2, 0x74, 0xac, 0xd9, 0xee, 0xf5, 0x38, 0xde, 0xda, 0xfd, 0x0f, 0x99, 0xb4,
	0x6f, 0x19, 0xd0, 0x55, 0x3a, 0xe6, 0xce, 0x5c, 0xfe, 0x13, 0xd9, 0xcf, 0x5f, 0xde, 0xef, 0xaf,
	0xc8, 0x90, 0xfc, 0x49, 0xea, 0xec, 0xfd, 0xf9, 0xd2, 0x32, 0xfe, 0x7a, 0x69, 0x19, 0xff, 0xbc,
	0xb4, 0x8c, 0xdf, 0xff, 0x6b, 0x7d, 0x34, 0x2c, 0xcb, 0x7f, 0x6e, 0x5f, 0xfe, 0x1f, 0x00, 0x00,
	0xff, 0xff, 0x4e, 0x17, 0xac, 0x51, 0xca, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TeacherServiceClient is the client API for TeacherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TeacherServiceClient interface {
	TeacherCreate(ctx context.Context, in *Teacher, opts ...grpc.CallOption) (*Teacher, error)
	TeacherGet(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*Teacher, error)
	TeacherSignUp(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Teacher, error)
	TeacherList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*TeacherListResp, error)
	TeacherLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*TeacherLoginResp, error)
	TeacherUpdate(ctx context.Context, in *Teacher, opts ...grpc.CallOption) (*Teacher, error)
	TeacherDelete(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*EmptyRes, error)
	TeacherSalaryCreate(ctx context.Context, in *TeacherSalary, opts ...grpc.CallOption) (*TeacherSalary, error)
	TeacherSalaryGet(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*TeacherSalary, error)
	TeacherSalaryList(ctx context.Context, in *SalaryReq, opts ...grpc.CallOption) (*TeacherSalaryListResp, error)
	TeacherSalaryUpdate(ctx context.Context, in *TeacherSalary, opts ...grpc.CallOption) (*TeacherSalary, error)
	TeacherSalaryDelete(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*EmptyRes, error)
	TeacherByName(ctx context.Context, in *TTT, opts ...grpc.CallOption) (*NameResp, error)
}

type teacherServiceClient struct {
	cc *grpc.ClientConn
}

func NewTeacherServiceClient(cc *grpc.ClientConn) TeacherServiceClient {
	return &teacherServiceClient{cc}
}

func (c *teacherServiceClient) TeacherCreate(ctx context.Context, in *Teacher, opts ...grpc.CallOption) (*Teacher, error) {
	out := new(Teacher)
	err := c.cc.Invoke(ctx, "/teacher_service.TeacherService/TeacherCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) TeacherGet(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*Teacher, error) {
	out := new(Teacher)
	err := c.cc.Invoke(ctx, "/teacher_service.TeacherService/TeacherGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) TeacherSignUp(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Teacher, error) {
	out := new(Teacher)
	err := c.cc.Invoke(ctx, "/teacher_service.TeacherService/TeacherSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) TeacherList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*TeacherListResp, error) {
	out := new(TeacherListResp)
	err := c.cc.Invoke(ctx, "/teacher_service.TeacherService/TeacherList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) TeacherLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*TeacherLoginResp, error) {
	out := new(TeacherLoginResp)
	err := c.cc.Invoke(ctx, "/teacher_service.TeacherService/TeacherLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) TeacherUpdate(ctx context.Context, in *Teacher, opts ...grpc.CallOption) (*Teacher, error) {
	out := new(Teacher)
	err := c.cc.Invoke(ctx, "/teacher_service.TeacherService/TeacherUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) TeacherDelete(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/teacher_service.TeacherService/TeacherDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) TeacherSalaryCreate(ctx context.Context, in *TeacherSalary, opts ...grpc.CallOption) (*TeacherSalary, error) {
	out := new(TeacherSalary)
	err := c.cc.Invoke(ctx, "/teacher_service.TeacherService/TeacherSalaryCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) TeacherSalaryGet(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*TeacherSalary, error) {
	out := new(TeacherSalary)
	err := c.cc.Invoke(ctx, "/teacher_service.TeacherService/TeacherSalaryGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) TeacherSalaryList(ctx context.Context, in *SalaryReq, opts ...grpc.CallOption) (*TeacherSalaryListResp, error) {
	out := new(TeacherSalaryListResp)
	err := c.cc.Invoke(ctx, "/teacher_service.TeacherService/TeacherSalaryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) TeacherSalaryUpdate(ctx context.Context, in *TeacherSalary, opts ...grpc.CallOption) (*TeacherSalary, error) {
	out := new(TeacherSalary)
	err := c.cc.Invoke(ctx, "/teacher_service.TeacherService/TeacherSalaryUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) TeacherSalaryDelete(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/teacher_service.TeacherService/TeacherSalaryDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) TeacherByName(ctx context.Context, in *TTT, opts ...grpc.CallOption) (*NameResp, error) {
	out := new(NameResp)
	err := c.cc.Invoke(ctx, "/teacher_service.TeacherService/TeacherByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeacherServiceServer is the server API for TeacherService service.
type TeacherServiceServer interface {
	TeacherCreate(context.Context, *Teacher) (*Teacher, error)
	TeacherGet(context.Context, *ByIdReq) (*Teacher, error)
	TeacherSignUp(context.Context, *Token) (*Teacher, error)
	TeacherList(context.Context, *ListReq) (*TeacherListResp, error)
	TeacherLogin(context.Context, *LoginReq) (*TeacherLoginResp, error)
	TeacherUpdate(context.Context, *Teacher) (*Teacher, error)
	TeacherDelete(context.Context, *ByIdReq) (*EmptyRes, error)
	TeacherSalaryCreate(context.Context, *TeacherSalary) (*TeacherSalary, error)
	TeacherSalaryGet(context.Context, *ByIdReq) (*TeacherSalary, error)
	TeacherSalaryList(context.Context, *SalaryReq) (*TeacherSalaryListResp, error)
	TeacherSalaryUpdate(context.Context, *TeacherSalary) (*TeacherSalary, error)
	TeacherSalaryDelete(context.Context, *ByIdReq) (*EmptyRes, error)
	TeacherByName(context.Context, *TTT) (*NameResp, error)
}

// UnimplementedTeacherServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTeacherServiceServer struct {
}

func (*UnimplementedTeacherServiceServer) TeacherCreate(ctx context.Context, req *Teacher) (*Teacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherCreate not implemented")
}
func (*UnimplementedTeacherServiceServer) TeacherGet(ctx context.Context, req *ByIdReq) (*Teacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherGet not implemented")
}
func (*UnimplementedTeacherServiceServer) TeacherSignUp(ctx context.Context, req *Token) (*Teacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherSignUp not implemented")
}
func (*UnimplementedTeacherServiceServer) TeacherList(ctx context.Context, req *ListReq) (*TeacherListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherList not implemented")
}
func (*UnimplementedTeacherServiceServer) TeacherLogin(ctx context.Context, req *LoginReq) (*TeacherLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherLogin not implemented")
}
func (*UnimplementedTeacherServiceServer) TeacherUpdate(ctx context.Context, req *Teacher) (*Teacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherUpdate not implemented")
}
func (*UnimplementedTeacherServiceServer) TeacherDelete(ctx context.Context, req *ByIdReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherDelete not implemented")
}
func (*UnimplementedTeacherServiceServer) TeacherSalaryCreate(ctx context.Context, req *TeacherSalary) (*TeacherSalary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherSalaryCreate not implemented")
}
func (*UnimplementedTeacherServiceServer) TeacherSalaryGet(ctx context.Context, req *ByIdReq) (*TeacherSalary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherSalaryGet not implemented")
}
func (*UnimplementedTeacherServiceServer) TeacherSalaryList(ctx context.Context, req *SalaryReq) (*TeacherSalaryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherSalaryList not implemented")
}
func (*UnimplementedTeacherServiceServer) TeacherSalaryUpdate(ctx context.Context, req *TeacherSalary) (*TeacherSalary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherSalaryUpdate not implemented")
}
func (*UnimplementedTeacherServiceServer) TeacherSalaryDelete(ctx context.Context, req *ByIdReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherSalaryDelete not implemented")
}
func (*UnimplementedTeacherServiceServer) TeacherByName(ctx context.Context, req *TTT) (*NameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherByName not implemented")
}

func RegisterTeacherServiceServer(s *grpc.Server, srv TeacherServiceServer) {
	s.RegisterService(&_TeacherService_serviceDesc, srv)
}

func _TeacherService_TeacherCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Teacher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).TeacherCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher_service.TeacherService/TeacherCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).TeacherCreate(ctx, req.(*Teacher))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_TeacherGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).TeacherGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher_service.TeacherService/TeacherGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).TeacherGet(ctx, req.(*ByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_TeacherSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).TeacherSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher_service.TeacherService/TeacherSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).TeacherSignUp(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_TeacherList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).TeacherList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher_service.TeacherService/TeacherList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).TeacherList(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_TeacherLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).TeacherLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher_service.TeacherService/TeacherLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).TeacherLogin(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_TeacherUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Teacher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).TeacherUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher_service.TeacherService/TeacherUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).TeacherUpdate(ctx, req.(*Teacher))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_TeacherDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).TeacherDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher_service.TeacherService/TeacherDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).TeacherDelete(ctx, req.(*ByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_TeacherSalaryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherSalary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).TeacherSalaryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher_service.TeacherService/TeacherSalaryCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).TeacherSalaryCreate(ctx, req.(*TeacherSalary))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_TeacherSalaryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).TeacherSalaryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher_service.TeacherService/TeacherSalaryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).TeacherSalaryGet(ctx, req.(*ByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_TeacherSalaryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).TeacherSalaryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher_service.TeacherService/TeacherSalaryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).TeacherSalaryList(ctx, req.(*SalaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_TeacherSalaryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherSalary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).TeacherSalaryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher_service.TeacherService/TeacherSalaryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).TeacherSalaryUpdate(ctx, req.(*TeacherSalary))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_TeacherSalaryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).TeacherSalaryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher_service.TeacherService/TeacherSalaryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).TeacherSalaryDelete(ctx, req.(*ByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_TeacherByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TTT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).TeacherByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teacher_service.TeacherService/TeacherByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).TeacherByName(ctx, req.(*TTT))
	}
	return interceptor(ctx, in, info, handler)
}

var _TeacherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "teacher_service.TeacherService",
	HandlerType: (*TeacherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TeacherCreate",
			Handler:    _TeacherService_TeacherCreate_Handler,
		},
		{
			MethodName: "TeacherGet",
			Handler:    _TeacherService_TeacherGet_Handler,
		},
		{
			MethodName: "TeacherSignUp",
			Handler:    _TeacherService_TeacherSignUp_Handler,
		},
		{
			MethodName: "TeacherList",
			Handler:    _TeacherService_TeacherList_Handler,
		},
		{
			MethodName: "TeacherLogin",
			Handler:    _TeacherService_TeacherLogin_Handler,
		},
		{
			MethodName: "TeacherUpdate",
			Handler:    _TeacherService_TeacherUpdate_Handler,
		},
		{
			MethodName: "TeacherDelete",
			Handler:    _TeacherService_TeacherDelete_Handler,
		},
		{
			MethodName: "TeacherSalaryCreate",
			Handler:    _TeacherService_TeacherSalaryCreate_Handler,
		},
		{
			MethodName: "TeacherSalaryGet",
			Handler:    _TeacherService_TeacherSalaryGet_Handler,
		},
		{
			MethodName: "TeacherSalaryList",
			Handler:    _TeacherService_TeacherSalaryList_Handler,
		},
		{
			MethodName: "TeacherSalaryUpdate",
			Handler:    _TeacherService_TeacherSalaryUpdate_Handler,
		},
		{
			MethodName: "TeacherSalaryDelete",
			Handler:    _TeacherService_TeacherSalaryDelete_Handler,
		},
		{
			MethodName: "TeacherByName",
			Handler:    _TeacherService_TeacherByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teacher.proto",
}

func (m *EmptyRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *TTT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TTT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TTT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Permission) > 0 {
		i -= len(m.Permission)
		copy(dAtA[i:], m.Permission)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Permission)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Name) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Name) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NameResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Teacher) > 0 {
		for iNdEx := len(m.Teacher) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teacher[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeacher(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Teacher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Teacher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Teacher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.DirectionId) > 0 {
		i -= len(m.DirectionId)
		copy(dAtA[i:], m.DirectionId)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.DirectionId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.BranchId) > 0 {
		i -= len(m.BranchId)
		copy(dAtA[i:], m.BranchId)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.BranchId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.PassportImage2) > 0 {
		i -= len(m.PassportImage2)
		copy(dAtA[i:], m.PassportImage2)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.PassportImage2)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.PassportImage1) > 0 {
		i -= len(m.PassportImage1)
		copy(dAtA[i:], m.PassportImage1)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.PassportImage1)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.PassportSeries) > 0 {
		i -= len(m.PassportSeries)
		copy(dAtA[i:], m.PassportSeries)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.PassportSeries)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.WorkingDay) > 0 {
		i -= len(m.WorkingDay)
		copy(dAtA[i:], m.WorkingDay)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.WorkingDay)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Permission) > 0 {
		i -= len(m.Permission)
		copy(dAtA[i:], m.Permission)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Permission)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Phone2) > 0 {
		i -= len(m.Phone2)
		copy(dAtA[i:], m.Phone2)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Phone2)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Phone1) > 0 {
		i -= len(m.Phone1)
		copy(dAtA[i:], m.Phone1)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Phone1)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Birthday) > 0 {
		i -= len(m.Birthday)
		copy(dAtA[i:], m.Birthday)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Birthday)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FullName) > 0 {
		i -= len(m.FullName)
		copy(dAtA[i:], m.FullName)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.FullName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeacherSalary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherSalary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherSalary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TeacherId) > 0 {
		i -= len(m.TeacherId)
		copy(dAtA[i:], m.TeacherId)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.TeacherId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DateOfBegin) > 0 {
		i -= len(m.DateOfBegin)
		copy(dAtA[i:], m.DateOfBegin)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.DateOfBegin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Commnet) > 0 {
		i -= len(m.Commnet)
		copy(dAtA[i:], m.Commnet)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Commnet)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeacherSalaryListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherSalaryListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherSalaryListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintTeacher(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Salary) > 0 {
		for iNdEx := len(m.Salary) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Salary[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeacher(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TeacherLoginResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherLoginResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherLoginResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Whoami) > 0 {
		i -= len(m.Whoami)
		copy(dAtA[i:], m.Whoami)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Whoami)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeacherListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintTeacher(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Teachers) > 0 {
		for iNdEx := len(m.Teachers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teachers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeacher(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintTeacher(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintTeacher(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Permission) > 0 {
		i -= len(m.Permission)
		copy(dAtA[i:], m.Permission)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Permission)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SalaryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SalaryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SalaryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByIdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ByIdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTeacher(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTeacher(dAtA []byte, offset int, v uint64) int {
	offset -= sovTeacher(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EmptyRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TTT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Permission)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NameResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Teacher) > 0 {
		for _, e := range m.Teacher {
			l = e.Size()
			n += 1 + l + sovTeacher(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Teacher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.Birthday)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.Phone1)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.Phone2)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.Permission)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.WorkingDay)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.PassportSeries)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.PassportImage1)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.PassportImage2)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.BranchId)
	if l > 0 {
		n += 2 + l + sovTeacher(uint64(l))
	}
	l = len(m.DirectionId)
	if l > 0 {
		n += 2 + l + sovTeacher(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovTeacher(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovTeacher(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeacherSalary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.Commnet)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.DateOfBegin)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.TeacherId)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeacherSalaryListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Salary) > 0 {
		for _, e := range m.Salary {
			l = e.Size()
			n += 1 + l + sovTeacher(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovTeacher(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeacherLoginResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.Whoami)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeacherListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Teachers) > 0 {
		for _, e := range m.Teachers {
			l = e.Size()
			n += 1 + l + sovTeacher(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovTeacher(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Permission)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovTeacher(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovTeacher(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SalaryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ByIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTeacher(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTeacher(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTeacher(x uint64) (n int) {
	return sovTeacher(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmptyRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeacher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTeacher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeacher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TTT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeacher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TTT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TTT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeacher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeacher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Name) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeacher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Name: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Name: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeacher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeacher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeacher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teacher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teacher = append(m.Teacher, &Name{})
			if err := m.Teacher[len(m.Teacher)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeacher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeacher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Teacher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeacher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Teacher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Teacher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Birthday = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkingDay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkingDay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassportSeries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassportSeries = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassportImage1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassportImage1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassportImage2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassportImage2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeacher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeacher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherSalary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeacher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherSalary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherSalary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateOfBegin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateOfBegin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeacherId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeacher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeacher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherSalaryListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeacher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherSalaryListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherSalaryListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salary = append(m.Salary, &TeacherSalary{})
			if err := m.Salary[len(m.Salary)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeacher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeacher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherLoginResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeacher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherLoginResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherLoginResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whoami", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Whoami = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeacher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeacher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeacher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teachers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teachers = append(m.Teachers, &Teacher{})
			if err := m.Teachers[len(m.Teachers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeacher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeacher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeacher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeacher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeacher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeacher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeacher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeacher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SalaryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeacher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SalaryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SalaryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeacher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeacher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeacher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeacher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeacher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeacher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeacher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeacher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeacher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTeacher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTeacher(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTeacher
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeacher
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTeacher
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTeacher
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTeacher
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTeacher        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTeacher          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTeacher = fmt.Errorf("proto: unexpected end of group")
)
