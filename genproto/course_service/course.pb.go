// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: course.proto

package course_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EmptyRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyRes) Reset()         { *m = EmptyRes{} }
func (m *EmptyRes) String() string { return proto.CompactTextString(m) }
func (*EmptyRes) ProtoMessage()    {}
func (*EmptyRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{0}
}
func (m *EmptyRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRes.Merge(m, src)
}
func (m *EmptyRes) XXX_Size() int {
	return m.Size()
}
func (m *EmptyRes) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRes.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRes proto.InternalMessageInfo

type Req struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{1}
}
func (m *Req) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Req.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return m.Size()
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type GetBall struct {
	GroupId              string   `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBall) Reset()         { *m = GetBall{} }
func (m *GetBall) String() string { return proto.CompactTextString(m) }
func (*GetBall) ProtoMessage()    {}
func (*GetBall) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{2}
}
func (m *GetBall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBall.Merge(m, src)
}
func (m *GetBall) XXX_Size() int {
	return m.Size()
}
func (m *GetBall) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBall.DiscardUnknown(m)
}

var xxx_messageInfo_GetBall proto.InternalMessageInfo

func (m *GetBall) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

type Example struct {
	WithDate             string   `protobuf:"bytes,1,opt,name=with_date,json=withDate,proto3" json:"with_date"`
	Comment              string   `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment"`
	Participate          string   `protobuf:"bytes,3,opt,name=participate,proto3" json:"participate"`
	StudentId            string   `protobuf:"bytes,4,opt,name=student_id,json=studentId,proto3" json:"student_id"`
	GroupId              string   `protobuf:"bytes,5,opt,name=group_id,json=groupId,proto3" json:"group_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Example) Reset()         { *m = Example{} }
func (m *Example) String() string { return proto.CompactTextString(m) }
func (*Example) ProtoMessage()    {}
func (*Example) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{3}
}
func (m *Example) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Example) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Example.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Example) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Example.Merge(m, src)
}
func (m *Example) XXX_Size() int {
	return m.Size()
}
func (m *Example) XXX_DiscardUnknown() {
	xxx_messageInfo_Example.DiscardUnknown(m)
}

var xxx_messageInfo_Example proto.InternalMessageInfo

func (m *Example) GetWithDate() string {
	if m != nil {
		return m.WithDate
	}
	return ""
}

func (m *Example) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Example) GetParticipate() string {
	if m != nil {
		return m.Participate
	}
	return ""
}

func (m *Example) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *Example) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

type ExampleBal struct {
	WithDate             string   `protobuf:"bytes,1,opt,name=with_date,json=withDate,proto3" json:"with_date"`
	Ball                 string   `protobuf:"bytes,2,opt,name=ball,proto3" json:"ball"`
	StudentId            string   `protobuf:"bytes,3,opt,name=student_id,json=studentId,proto3" json:"student_id"`
	GroupId              string   `protobuf:"bytes,4,opt,name=group_id,json=groupId,proto3" json:"group_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExampleBal) Reset()         { *m = ExampleBal{} }
func (m *ExampleBal) String() string { return proto.CompactTextString(m) }
func (*ExampleBal) ProtoMessage()    {}
func (*ExampleBal) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{4}
}
func (m *ExampleBal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExampleBal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExampleBal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExampleBal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExampleBal.Merge(m, src)
}
func (m *ExampleBal) XXX_Size() int {
	return m.Size()
}
func (m *ExampleBal) XXX_DiscardUnknown() {
	xxx_messageInfo_ExampleBal.DiscardUnknown(m)
}

var xxx_messageInfo_ExampleBal proto.InternalMessageInfo

func (m *ExampleBal) GetWithDate() string {
	if m != nil {
		return m.WithDate
	}
	return ""
}

func (m *ExampleBal) GetBall() string {
	if m != nil {
		return m.Ball
	}
	return ""
}

func (m *ExampleBal) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *ExampleBal) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

type GetParticipate struct {
	GroupId              string   `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetParticipate) Reset()         { *m = GetParticipate{} }
func (m *GetParticipate) String() string { return proto.CompactTextString(m) }
func (*GetParticipate) ProtoMessage()    {}
func (*GetParticipate) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{5}
}
func (m *GetParticipate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetParticipate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetParticipate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetParticipate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetParticipate.Merge(m, src)
}
func (m *GetParticipate) XXX_Size() int {
	return m.Size()
}
func (m *GetParticipate) XXX_DiscardUnknown() {
	xxx_messageInfo_GetParticipate.DiscardUnknown(m)
}

var xxx_messageInfo_GetParticipate proto.InternalMessageInfo

func (m *GetParticipate) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

type Bal struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Ball                 int32    `protobuf:"varint,2,opt,name=ball,proto3" json:"ball"`
	WithDate             string   `protobuf:"bytes,3,opt,name=with_date,json=withDate,proto3" json:"with_date"`
	GroupId              string   `protobuf:"bytes,4,opt,name=group_id,json=groupId,proto3" json:"group_id"`
	StudentId            string   `protobuf:"bytes,5,opt,name=student_id,json=studentId,proto3" json:"student_id"`
	CreatedAt            string   `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bal) Reset()         { *m = Bal{} }
func (m *Bal) String() string { return proto.CompactTextString(m) }
func (*Bal) ProtoMessage()    {}
func (*Bal) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{6}
}
func (m *Bal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bal.Merge(m, src)
}
func (m *Bal) XXX_Size() int {
	return m.Size()
}
func (m *Bal) XXX_DiscardUnknown() {
	xxx_messageInfo_Bal.DiscardUnknown(m)
}

var xxx_messageInfo_Bal proto.InternalMessageInfo

func (m *Bal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Bal) GetBall() int32 {
	if m != nil {
		return m.Ball
	}
	return 0
}

func (m *Bal) GetWithDate() string {
	if m != nil {
		return m.WithDate
	}
	return ""
}

func (m *Bal) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Bal) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *Bal) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Bal) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type BallCreate struct {
	Bal                  []*Bal   `protobuf:"bytes,1,rep,name=bal,proto3" json:"bal"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BallCreate) Reset()         { *m = BallCreate{} }
func (m *BallCreate) String() string { return proto.CompactTextString(m) }
func (*BallCreate) ProtoMessage()    {}
func (*BallCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{7}
}
func (m *BallCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BallCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BallCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BallCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BallCreate.Merge(m, src)
}
func (m *BallCreate) XXX_Size() int {
	return m.Size()
}
func (m *BallCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_BallCreate.DiscardUnknown(m)
}

var xxx_messageInfo_BallCreate proto.InternalMessageInfo

func (m *BallCreate) GetBal() []*Bal {
	if m != nil {
		return m.Bal
	}
	return nil
}

type WithDate struct {
	WithDate             string   `protobuf:"bytes,1,opt,name=with_date,json=withDate,proto3" json:"with_date"`
	Ball                 string   `protobuf:"bytes,2,opt,name=ball,proto3" json:"ball"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WithDate) Reset()         { *m = WithDate{} }
func (m *WithDate) String() string { return proto.CompactTextString(m) }
func (*WithDate) ProtoMessage()    {}
func (*WithDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{8}
}
func (m *WithDate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithDate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithDate.Merge(m, src)
}
func (m *WithDate) XXX_Size() int {
	return m.Size()
}
func (m *WithDate) XXX_DiscardUnknown() {
	xxx_messageInfo_WithDate.DiscardUnknown(m)
}

var xxx_messageInfo_WithDate proto.InternalMessageInfo

func (m *WithDate) GetWithDate() string {
	if m != nil {
		return m.WithDate
	}
	return ""
}

func (m *WithDate) GetBall() string {
	if m != nil {
		return m.Ball
	}
	return ""
}

type WithDateParticipate struct {
	WithDate             string   `protobuf:"bytes,1,opt,name=with_date,json=withDate,proto3" json:"with_date"`
	Participate          bool     `protobuf:"varint,2,opt,name=participate,proto3" json:"participate"`
	Comment              string   `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WithDateParticipate) Reset()         { *m = WithDateParticipate{} }
func (m *WithDateParticipate) String() string { return proto.CompactTextString(m) }
func (*WithDateParticipate) ProtoMessage()    {}
func (*WithDateParticipate) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{9}
}
func (m *WithDateParticipate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithDateParticipate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithDateParticipate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithDateParticipate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithDateParticipate.Merge(m, src)
}
func (m *WithDateParticipate) XXX_Size() int {
	return m.Size()
}
func (m *WithDateParticipate) XXX_DiscardUnknown() {
	xxx_messageInfo_WithDateParticipate.DiscardUnknown(m)
}

var xxx_messageInfo_WithDateParticipate proto.InternalMessageInfo

func (m *WithDateParticipate) GetWithDate() string {
	if m != nil {
		return m.WithDate
	}
	return ""
}

func (m *WithDateParticipate) GetParticipate() bool {
	if m != nil {
		return m.Participate
	}
	return false
}

func (m *WithDateParticipate) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type BalStudent struct {
	StudentId            *ByN        `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id"`
	StudentAllBals       []*WithDate `protobuf:"bytes,2,rep,name=student_all_bals,json=studentAllBals,proto3" json:"student_all_bals"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BalStudent) Reset()         { *m = BalStudent{} }
func (m *BalStudent) String() string { return proto.CompactTextString(m) }
func (*BalStudent) ProtoMessage()    {}
func (*BalStudent) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{10}
}
func (m *BalStudent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalStudent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalStudent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalStudent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalStudent.Merge(m, src)
}
func (m *BalStudent) XXX_Size() int {
	return m.Size()
}
func (m *BalStudent) XXX_DiscardUnknown() {
	xxx_messageInfo_BalStudent.DiscardUnknown(m)
}

var xxx_messageInfo_BalStudent proto.InternalMessageInfo

func (m *BalStudent) GetStudentId() *ByN {
	if m != nil {
		return m.StudentId
	}
	return nil
}

func (m *BalStudent) GetStudentAllBals() []*WithDate {
	if m != nil {
		return m.StudentAllBals
	}
	return nil
}

type ParticipateStudent struct {
	StudentId             *ByN                   `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id"`
	StudentAllParticipate []*WithDateParticipate `protobuf:"bytes,2,rep,name=student_all_participate,json=studentAllParticipate,proto3" json:"student_all_participate"`
	XXX_NoUnkeyedLiteral  struct{}               `json:"-"`
	XXX_unrecognized      []byte                 `json:"-"`
	XXX_sizecache         int32                  `json:"-"`
}

func (m *ParticipateStudent) Reset()         { *m = ParticipateStudent{} }
func (m *ParticipateStudent) String() string { return proto.CompactTextString(m) }
func (*ParticipateStudent) ProtoMessage()    {}
func (*ParticipateStudent) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{11}
}
func (m *ParticipateStudent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipateStudent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipateStudent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipateStudent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipateStudent.Merge(m, src)
}
func (m *ParticipateStudent) XXX_Size() int {
	return m.Size()
}
func (m *ParticipateStudent) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipateStudent.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipateStudent proto.InternalMessageInfo

func (m *ParticipateStudent) GetStudentId() *ByN {
	if m != nil {
		return m.StudentId
	}
	return nil
}

func (m *ParticipateStudent) GetStudentAllParticipate() []*WithDateParticipate {
	if m != nil {
		return m.StudentAllParticipate
	}
	return nil
}

type Participate struct {
	GroupId              string   `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id"`
	GroupName            string   `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name"`
	TeacherId            string   `protobuf:"bytes,3,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id"`
	TeacherName          string   `protobuf:"bytes,4,opt,name=teacher_name,json=teacherName,proto3" json:"teacher_name"`
	WithDate             string   `protobuf:"bytes,5,opt,name=with_date,json=withDate,proto3" json:"with_date"`
	BeginTime            string   `protobuf:"bytes,6,opt,name=begin_time,json=beginTime,proto3" json:"begin_time"`
	CloseTime            string   `protobuf:"bytes,7,opt,name=close_time,json=closeTime,proto3" json:"close_time"`
	ParticipateCount     []*Resp  `protobuf:"bytes,8,rep,name=participate_count,json=participateCount,proto3" json:"participate_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Participate) Reset()         { *m = Participate{} }
func (m *Participate) String() string { return proto.CompactTextString(m) }
func (*Participate) ProtoMessage()    {}
func (*Participate) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{12}
}
func (m *Participate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Participate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Participate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Participate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Participate.Merge(m, src)
}
func (m *Participate) XXX_Size() int {
	return m.Size()
}
func (m *Participate) XXX_DiscardUnknown() {
	xxx_messageInfo_Participate.DiscardUnknown(m)
}

var xxx_messageInfo_Participate proto.InternalMessageInfo

func (m *Participate) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Participate) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *Participate) GetTeacherId() string {
	if m != nil {
		return m.TeacherId
	}
	return ""
}

func (m *Participate) GetTeacherName() string {
	if m != nil {
		return m.TeacherName
	}
	return ""
}

func (m *Participate) GetWithDate() string {
	if m != nil {
		return m.WithDate
	}
	return ""
}

func (m *Participate) GetBeginTime() string {
	if m != nil {
		return m.BeginTime
	}
	return ""
}

func (m *Participate) GetCloseTime() string {
	if m != nil {
		return m.CloseTime
	}
	return ""
}

func (m *Participate) GetParticipateCount() []*Resp {
	if m != nil {
		return m.ParticipateCount
	}
	return nil
}

type Participates struct {
	Participate          []*Participate `protobuf:"bytes,1,rep,name=participate,proto3" json:"participate"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Participates) Reset()         { *m = Participates{} }
func (m *Participates) String() string { return proto.CompactTextString(m) }
func (*Participates) ProtoMessage()    {}
func (*Participates) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{13}
}
func (m *Participates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Participates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Participates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Participates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Participates.Merge(m, src)
}
func (m *Participates) XXX_Size() int {
	return m.Size()
}
func (m *Participates) XXX_DiscardUnknown() {
	xxx_messageInfo_Participates.DiscardUnknown(m)
}

var xxx_messageInfo_Participates proto.InternalMessageInfo

func (m *Participates) GetParticipate() []*Participate {
	if m != nil {
		return m.Participate
	}
	return nil
}

type BalListResp struct {
	GroupBals            []*BalStudent `protobuf:"bytes,1,rep,name=group_bals,json=groupBals,proto3" json:"group_bals"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BalListResp) Reset()         { *m = BalListResp{} }
func (m *BalListResp) String() string { return proto.CompactTextString(m) }
func (*BalListResp) ProtoMessage()    {}
func (*BalListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{14}
}
func (m *BalListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalListResp.Merge(m, src)
}
func (m *BalListResp) XXX_Size() int {
	return m.Size()
}
func (m *BalListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BalListResp.DiscardUnknown(m)
}

var xxx_messageInfo_BalListResp proto.InternalMessageInfo

func (m *BalListResp) GetGroupBals() []*BalStudent {
	if m != nil {
		return m.GroupBals
	}
	return nil
}

type ParticipateListResp struct {
	GroupParticipate     []*ParticipateStudent `protobuf:"bytes,1,rep,name=group_participate,json=groupParticipate,proto3" json:"group_participate"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ParticipateListResp) Reset()         { *m = ParticipateListResp{} }
func (m *ParticipateListResp) String() string { return proto.CompactTextString(m) }
func (*ParticipateListResp) ProtoMessage()    {}
func (*ParticipateListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{15}
}
func (m *ParticipateListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipateListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipateListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipateListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipateListResp.Merge(m, src)
}
func (m *ParticipateListResp) XXX_Size() int {
	return m.Size()
}
func (m *ParticipateListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipateListResp.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipateListResp proto.InternalMessageInfo

func (m *ParticipateListResp) GetGroupParticipate() []*ParticipateStudent {
	if m != nil {
		return m.GroupParticipate
	}
	return nil
}

type Group struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	DateOfBegin          string   `protobuf:"bytes,3,opt,name=date_of_begin,json=dateOfBegin,proto3" json:"date_of_begin"`
	DateOfClose          string   `protobuf:"bytes,4,opt,name=date_of_close,json=dateOfClose,proto3" json:"date_of_close"`
	WithDays             string   `protobuf:"bytes,5,opt,name=with_days,json=withDays,proto3" json:"with_days"`
	BeginTime            string   `protobuf:"bytes,6,opt,name=begin_time,json=beginTime,proto3" json:"begin_time"`
	CloseTime            string   `protobuf:"bytes,7,opt,name=close_time,json=closeTime,proto3" json:"close_time"`
	Lesson               string   `protobuf:"bytes,8,opt,name=lesson,proto3" json:"lesson"`
	Comment              string   `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment"`
	Active               string   `protobuf:"bytes,10,opt,name=active,proto3" json:"active"`
	DirectionId          string   `protobuf:"bytes,11,opt,name=direction_id,json=directionId,proto3" json:"direction_id"`
	TeacherId            string   `protobuf:"bytes,12,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id"`
	AsistentId           []string `protobuf:"bytes,13,rep,name=asistent_id,json=asistentId,proto3" json:"asistent_id"`
	BranchId             string   `protobuf:"bytes,14,opt,name=branch_id,json=branchId,proto3" json:"branch_id"`
	RoomId               string   `protobuf:"bytes,15,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	CreatedAt            string   `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{16}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetDateOfBegin() string {
	if m != nil {
		return m.DateOfBegin
	}
	return ""
}

func (m *Group) GetDateOfClose() string {
	if m != nil {
		return m.DateOfClose
	}
	return ""
}

func (m *Group) GetWithDays() string {
	if m != nil {
		return m.WithDays
	}
	return ""
}

func (m *Group) GetBeginTime() string {
	if m != nil {
		return m.BeginTime
	}
	return ""
}

func (m *Group) GetCloseTime() string {
	if m != nil {
		return m.CloseTime
	}
	return ""
}

func (m *Group) GetLesson() string {
	if m != nil {
		return m.Lesson
	}
	return ""
}

func (m *Group) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Group) GetActive() string {
	if m != nil {
		return m.Active
	}
	return ""
}

func (m *Group) GetDirectionId() string {
	if m != nil {
		return m.DirectionId
	}
	return ""
}

func (m *Group) GetTeacherId() string {
	if m != nil {
		return m.TeacherId
	}
	return ""
}

func (m *Group) GetAsistentId() []string {
	if m != nil {
		return m.AsistentId
	}
	return nil
}

func (m *Group) GetBranchId() string {
	if m != nil {
		return m.BranchId
	}
	return ""
}

func (m *Group) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *Group) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Group) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type GroupResp struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	DateOfBegin          string   `protobuf:"bytes,3,opt,name=date_of_begin,json=dateOfBegin,proto3" json:"date_of_begin"`
	DateOfClose          string   `protobuf:"bytes,4,opt,name=date_of_close,json=dateOfClose,proto3" json:"date_of_close"`
	WithDays             string   `protobuf:"bytes,5,opt,name=with_days,json=withDays,proto3" json:"with_days"`
	BeginTime            string   `protobuf:"bytes,6,opt,name=begin_time,json=beginTime,proto3" json:"begin_time"`
	CloseTime            string   `protobuf:"bytes,7,opt,name=close_time,json=closeTime,proto3" json:"close_time"`
	Lesson               string   `protobuf:"bytes,8,opt,name=lesson,proto3" json:"lesson"`
	Comment              string   `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment"`
	Active               string   `protobuf:"bytes,10,opt,name=active,proto3" json:"active"`
	Direction            *By      `protobuf:"bytes,11,opt,name=direction,proto3" json:"direction"`
	Teacher              *Byt     `protobuf:"bytes,12,opt,name=teacher,proto3" json:"teacher"`
	Assistent            []*Byt   `protobuf:"bytes,13,rep,name=assistent,proto3" json:"assistent"`
	Branch               *By      `protobuf:"bytes,14,opt,name=branch,proto3" json:"branch"`
	Room                 *By      `protobuf:"bytes,15,opt,name=room,proto3" json:"room"`
	CountStudent         string   `protobuf:"bytes,16,opt,name=count_student,json=countStudent,proto3" json:"count_student"`
	CreatedAt            string   `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,18,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupResp) Reset()         { *m = GroupResp{} }
func (m *GroupResp) String() string { return proto.CompactTextString(m) }
func (*GroupResp) ProtoMessage()    {}
func (*GroupResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{17}
}
func (m *GroupResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupResp.Merge(m, src)
}
func (m *GroupResp) XXX_Size() int {
	return m.Size()
}
func (m *GroupResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupResp.DiscardUnknown(m)
}

var xxx_messageInfo_GroupResp proto.InternalMessageInfo

func (m *GroupResp) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GroupResp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupResp) GetDateOfBegin() string {
	if m != nil {
		return m.DateOfBegin
	}
	return ""
}

func (m *GroupResp) GetDateOfClose() string {
	if m != nil {
		return m.DateOfClose
	}
	return ""
}

func (m *GroupResp) GetWithDays() string {
	if m != nil {
		return m.WithDays
	}
	return ""
}

func (m *GroupResp) GetBeginTime() string {
	if m != nil {
		return m.BeginTime
	}
	return ""
}

func (m *GroupResp) GetCloseTime() string {
	if m != nil {
		return m.CloseTime
	}
	return ""
}

func (m *GroupResp) GetLesson() string {
	if m != nil {
		return m.Lesson
	}
	return ""
}

func (m *GroupResp) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *GroupResp) GetActive() string {
	if m != nil {
		return m.Active
	}
	return ""
}

func (m *GroupResp) GetDirection() *By {
	if m != nil {
		return m.Direction
	}
	return nil
}

func (m *GroupResp) GetTeacher() *Byt {
	if m != nil {
		return m.Teacher
	}
	return nil
}

func (m *GroupResp) GetAssistent() []*Byt {
	if m != nil {
		return m.Assistent
	}
	return nil
}

func (m *GroupResp) GetBranch() *By {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *GroupResp) GetRoom() *By {
	if m != nil {
		return m.Room
	}
	return nil
}

func (m *GroupResp) GetCountStudent() string {
	if m != nil {
		return m.CountStudent
	}
	return ""
}

func (m *GroupResp) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GroupResp) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type Attendance struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Comment              string   `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment"`
	Participate          string   `protobuf:"bytes,3,opt,name=participate,proto3" json:"participate"`
	WithDate             string   `protobuf:"bytes,4,opt,name=with_date,json=withDate,proto3" json:"with_date"`
	GroupId              string   `protobuf:"bytes,5,opt,name=group_id,json=groupId,proto3" json:"group_id"`
	StudentId            string   `protobuf:"bytes,6,opt,name=student_id,json=studentId,proto3" json:"student_id"`
	CreatedAt            string   `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Attendance) Reset()         { *m = Attendance{} }
func (m *Attendance) String() string { return proto.CompactTextString(m) }
func (*Attendance) ProtoMessage()    {}
func (*Attendance) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{18}
}
func (m *Attendance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attendance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attendance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attendance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attendance.Merge(m, src)
}
func (m *Attendance) XXX_Size() int {
	return m.Size()
}
func (m *Attendance) XXX_DiscardUnknown() {
	xxx_messageInfo_Attendance.DiscardUnknown(m)
}

var xxx_messageInfo_Attendance proto.InternalMessageInfo

func (m *Attendance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Attendance) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Attendance) GetParticipate() string {
	if m != nil {
		return m.Participate
	}
	return ""
}

func (m *Attendance) GetWithDate() string {
	if m != nil {
		return m.WithDate
	}
	return ""
}

func (m *Attendance) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Attendance) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *Attendance) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Attendance) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type AttendanceCreates struct {
	Attendance           []*Attendance `protobuf:"bytes,1,rep,name=attendance,proto3" json:"attendance"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AttendanceCreates) Reset()         { *m = AttendanceCreates{} }
func (m *AttendanceCreates) String() string { return proto.CompactTextString(m) }
func (*AttendanceCreates) ProtoMessage()    {}
func (*AttendanceCreates) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{19}
}
func (m *AttendanceCreates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttendanceCreates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttendanceCreates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttendanceCreates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttendanceCreates.Merge(m, src)
}
func (m *AttendanceCreates) XXX_Size() int {
	return m.Size()
}
func (m *AttendanceCreates) XXX_DiscardUnknown() {
	xxx_messageInfo_AttendanceCreates.DiscardUnknown(m)
}

var xxx_messageInfo_AttendanceCreates proto.InternalMessageInfo

func (m *AttendanceCreates) GetAttendance() []*Attendance {
	if m != nil {
		return m.Attendance
	}
	return nil
}

type AttendanceListResp struct {
	Attendances          []*Attendance `protobuf:"bytes,1,rep,name=attendances,proto3" json:"attendances"`
	Count                int64         `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AttendanceListResp) Reset()         { *m = AttendanceListResp{} }
func (m *AttendanceListResp) String() string { return proto.CompactTextString(m) }
func (*AttendanceListResp) ProtoMessage()    {}
func (*AttendanceListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{20}
}
func (m *AttendanceListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttendanceListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttendanceListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttendanceListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttendanceListResp.Merge(m, src)
}
func (m *AttendanceListResp) XXX_Size() int {
	return m.Size()
}
func (m *AttendanceListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AttendanceListResp.DiscardUnknown(m)
}

var xxx_messageInfo_AttendanceListResp proto.InternalMessageInfo

func (m *AttendanceListResp) GetAttendances() []*Attendance {
	if m != nil {
		return m.Attendances
	}
	return nil
}

func (m *AttendanceListResp) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Assistent struct {
	GroupId              string   `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id"`
	TeacherId            string   `protobuf:"bytes,2,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Assistent) Reset()         { *m = Assistent{} }
func (m *Assistent) String() string { return proto.CompactTextString(m) }
func (*Assistent) ProtoMessage()    {}
func (*Assistent) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{21}
}
func (m *Assistent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Assistent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Assistent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Assistent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Assistent.Merge(m, src)
}
func (m *Assistent) XXX_Size() int {
	return m.Size()
}
func (m *Assistent) XXX_DiscardUnknown() {
	xxx_messageInfo_Assistent.DiscardUnknown(m)
}

var xxx_messageInfo_Assistent proto.InternalMessageInfo

func (m *Assistent) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Assistent) GetTeacherId() string {
	if m != nil {
		return m.TeacherId
	}
	return ""
}

type By struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *By) Reset()         { *m = By{} }
func (m *By) String() string { return proto.CompactTextString(m) }
func (*By) ProtoMessage()    {}
func (*By) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{22}
}
func (m *By) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *By) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_By.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *By) XXX_Merge(src proto.Message) {
	xxx_messageInfo_By.Merge(m, src)
}
func (m *By) XXX_Size() int {
	return m.Size()
}
func (m *By) XXX_DiscardUnknown() {
	xxx_messageInfo_By.DiscardUnknown(m)
}

var xxx_messageInfo_By proto.InternalMessageInfo

func (m *By) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *By) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ByN struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Phone                string   `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByN) Reset()         { *m = ByN{} }
func (m *ByN) String() string { return proto.CompactTextString(m) }
func (*ByN) ProtoMessage()    {}
func (*ByN) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{23}
}
func (m *ByN) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ByN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ByN.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ByN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByN.Merge(m, src)
}
func (m *ByN) XXX_Size() int {
	return m.Size()
}
func (m *ByN) XXX_DiscardUnknown() {
	xxx_messageInfo_ByN.DiscardUnknown(m)
}

var xxx_messageInfo_ByN proto.InternalMessageInfo

func (m *ByN) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ByN) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ByN) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type ByResp struct {
	Name                 string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Student              []*ByN     `protobuf:"bytes,2,rep,name=student,proto3" json:"student"`
	Example              []*Example `protobuf:"bytes,3,rep,name=example,proto3" json:"example"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ByResp) Reset()         { *m = ByResp{} }
func (m *ByResp) String() string { return proto.CompactTextString(m) }
func (*ByResp) ProtoMessage()    {}
func (*ByResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{24}
}
func (m *ByResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ByResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ByResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ByResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByResp.Merge(m, src)
}
func (m *ByResp) XXX_Size() int {
	return m.Size()
}
func (m *ByResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ByResp.DiscardUnknown(m)
}

var xxx_messageInfo_ByResp proto.InternalMessageInfo

func (m *ByResp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ByResp) GetStudent() []*ByN {
	if m != nil {
		return m.Student
	}
	return nil
}

func (m *ByResp) GetExample() []*Example {
	if m != nil {
		return m.Example
	}
	return nil
}

type ByBalResp struct {
	Name                 string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Student              []*ByN        `protobuf:"bytes,2,rep,name=student,proto3" json:"student"`
	Example              []*ExampleBal `protobuf:"bytes,3,rep,name=example,proto3" json:"example"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ByBalResp) Reset()         { *m = ByBalResp{} }
func (m *ByBalResp) String() string { return proto.CompactTextString(m) }
func (*ByBalResp) ProtoMessage()    {}
func (*ByBalResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{25}
}
func (m *ByBalResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ByBalResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ByBalResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ByBalResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByBalResp.Merge(m, src)
}
func (m *ByBalResp) XXX_Size() int {
	return m.Size()
}
func (m *ByBalResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ByBalResp.DiscardUnknown(m)
}

var xxx_messageInfo_ByBalResp proto.InternalMessageInfo

func (m *ByBalResp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ByBalResp) GetStudent() []*ByN {
	if m != nil {
		return m.Student
	}
	return nil
}

func (m *ByBalResp) GetExample() []*ExampleBal {
	if m != nil {
		return m.Example
	}
	return nil
}

type Byt struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Phone                string   `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone"`
	Permission           string   `protobuf:"bytes,4,opt,name=permission,proto3" json:"permission"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Byt) Reset()         { *m = Byt{} }
func (m *Byt) String() string { return proto.CompactTextString(m) }
func (*Byt) ProtoMessage()    {}
func (*Byt) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{26}
}
func (m *Byt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Byt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Byt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Byt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Byt.Merge(m, src)
}
func (m *Byt) XXX_Size() int {
	return m.Size()
}
func (m *Byt) XXX_DiscardUnknown() {
	xxx_messageInfo_Byt.DiscardUnknown(m)
}

var xxx_messageInfo_Byt proto.InternalMessageInfo

func (m *Byt) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Byt) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Byt) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Byt) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

type GroupListResp struct {
	Groups               []*GroupResp `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups"`
	Count                int64        `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GroupListResp) Reset()         { *m = GroupListResp{} }
func (m *GroupListResp) String() string { return proto.CompactTextString(m) }
func (*GroupListResp) ProtoMessage()    {}
func (*GroupListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{27}
}
func (m *GroupListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupListResp.Merge(m, src)
}
func (m *GroupListResp) XXX_Size() int {
	return m.Size()
}
func (m *GroupListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GroupListResp proto.InternalMessageInfo

func (m *GroupListResp) GetGroups() []*GroupResp {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *GroupListResp) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GroupListsResp struct {
	Groups               []*GroupResp `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups"`
	Count                int64        `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GroupListsResp) Reset()         { *m = GroupListsResp{} }
func (m *GroupListsResp) String() string { return proto.CompactTextString(m) }
func (*GroupListsResp) ProtoMessage()    {}
func (*GroupListsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{28}
}
func (m *GroupListsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupListsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupListsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupListsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupListsResp.Merge(m, src)
}
func (m *GroupListsResp) XXX_Size() int {
	return m.Size()
}
func (m *GroupListsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupListsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GroupListsResp proto.InternalMessageInfo

func (m *GroupListsResp) GetGroups() []*GroupResp {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *GroupListsResp) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ByIdReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByIdReq) Reset()         { *m = ByIdReq{} }
func (m *ByIdReq) String() string { return proto.CompactTextString(m) }
func (*ByIdReq) ProtoMessage()    {}
func (*ByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{29}
}
func (m *ByIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ByIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ByIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ByIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByIdReq.Merge(m, src)
}
func (m *ByIdReq) XXX_Size() int {
	return m.Size()
}
func (m *ByIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ByIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_ByIdReq proto.InternalMessageInfo

func (m *ByIdReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListReq struct {
	Teacher              string   `protobuf:"bytes,1,opt,name=teacher,proto3" json:"teacher"`
	Direction            string   `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction"`
	Student              string   `protobuf:"bytes,3,opt,name=student,proto3" json:"student"`
	Active               string   `protobuf:"bytes,6,opt,name=active,proto3" json:"active"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListReq) Reset()         { *m = ListReq{} }
func (m *ListReq) String() string { return proto.CompactTextString(m) }
func (*ListReq) ProtoMessage()    {}
func (*ListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{30}
}
func (m *ListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReq.Merge(m, src)
}
func (m *ListReq) XXX_Size() int {
	return m.Size()
}
func (m *ListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListReq proto.InternalMessageInfo

func (m *ListReq) GetTeacher() string {
	if m != nil {
		return m.Teacher
	}
	return ""
}

func (m *ListReq) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *ListReq) GetStudent() string {
	if m != nil {
		return m.Student
	}
	return ""
}

func (m *ListReq) GetActive() string {
	if m != nil {
		return m.Active
	}
	return ""
}

type Resp struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resp) Reset()         { *m = Resp{} }
func (m *Resp) String() string { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()    {}
func (*Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{31}
}
func (m *Resp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resp.Merge(m, src)
}
func (m *Resp) XXX_Size() int {
	return m.Size()
}
func (m *Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Resp proto.InternalMessageInfo

func (m *Resp) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ListIdReq struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListIdReq) Reset()         { *m = ListIdReq{} }
func (m *ListIdReq) String() string { return proto.CompactTextString(m) }
func (*ListIdReq) ProtoMessage()    {}
func (*ListIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{32}
}
func (m *ListIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListIdReq.Merge(m, src)
}
func (m *ListIdReq) XXX_Size() int {
	return m.Size()
}
func (m *ListIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListIdReq proto.InternalMessageInfo

func (m *ListIdReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListIdReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListIdReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListWithReq struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Day                  int64    `protobuf:"varint,3,opt,name=day,proto3" json:"day"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListWithReq) Reset()         { *m = ListWithReq{} }
func (m *ListWithReq) String() string { return proto.CompactTextString(m) }
func (*ListWithReq) ProtoMessage()    {}
func (*ListWithReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad75674299e1bb1e, []int{33}
}
func (m *ListWithReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWithReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWithReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWithReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWithReq.Merge(m, src)
}
func (m *ListWithReq) XXX_Size() int {
	return m.Size()
}
func (m *ListWithReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWithReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListWithReq proto.InternalMessageInfo

func (m *ListWithReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListWithReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListWithReq) GetDay() int64 {
	if m != nil {
		return m.Day
	}
	return 0
}

func init() {
	proto.RegisterType((*EmptyRes)(nil), "course_service.EmptyRes")
	proto.RegisterType((*Req)(nil), "course_service.Req")
	proto.RegisterType((*GetBall)(nil), "course_service.GetBall")
	proto.RegisterType((*Example)(nil), "course_service.Example")
	proto.RegisterType((*ExampleBal)(nil), "course_service.ExampleBal")
	proto.RegisterType((*GetParticipate)(nil), "course_service.GetParticipate")
	proto.RegisterType((*Bal)(nil), "course_service.Bal")
	proto.RegisterType((*BallCreate)(nil), "course_service.BallCreate")
	proto.RegisterType((*WithDate)(nil), "course_service.WithDate")
	proto.RegisterType((*WithDateParticipate)(nil), "course_service.WithDateParticipate")
	proto.RegisterType((*BalStudent)(nil), "course_service.BalStudent")
	proto.RegisterType((*ParticipateStudent)(nil), "course_service.ParticipateStudent")
	proto.RegisterType((*Participate)(nil), "course_service.Participate")
	proto.RegisterType((*Participates)(nil), "course_service.Participates")
	proto.RegisterType((*BalListResp)(nil), "course_service.BalListResp")
	proto.RegisterType((*ParticipateListResp)(nil), "course_service.ParticipateListResp")
	proto.RegisterType((*Group)(nil), "course_service.Group")
	proto.RegisterType((*GroupResp)(nil), "course_service.GroupResp")
	proto.RegisterType((*Attendance)(nil), "course_service.Attendance")
	proto.RegisterType((*AttendanceCreates)(nil), "course_service.AttendanceCreates")
	proto.RegisterType((*AttendanceListResp)(nil), "course_service.AttendanceListResp")
	proto.RegisterType((*Assistent)(nil), "course_service.Assistent")
	proto.RegisterType((*By)(nil), "course_service.By")
	proto.RegisterType((*ByN)(nil), "course_service.ByN")
	proto.RegisterType((*ByResp)(nil), "course_service.ByResp")
	proto.RegisterType((*ByBalResp)(nil), "course_service.ByBalResp")
	proto.RegisterType((*Byt)(nil), "course_service.Byt")
	proto.RegisterType((*GroupListResp)(nil), "course_service.GroupListResp")
	proto.RegisterType((*GroupListsResp)(nil), "course_service.GroupListsResp")
	proto.RegisterType((*ByIdReq)(nil), "course_service.ByIdReq")
	proto.RegisterType((*ListReq)(nil), "course_service.ListReq")
	proto.RegisterType((*Resp)(nil), "course_service.Resp")
	proto.RegisterType((*ListIdReq)(nil), "course_service.ListIdReq")
	proto.RegisterType((*ListWithReq)(nil), "course_service.ListWithReq")
}

func init() { proto.RegisterFile("course.proto", fileDescriptor_ad75674299e1bb1e) }

var fileDescriptor_ad75674299e1bb1e = []byte{
	// 1550 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x72, 0xdc, 0x44,
	0x10, 0x46, 0xab, 0xfd, 0xed, 0xb5, 0x1d, 0x7b, 0x9c, 0xd8, 0xeb, 0x75, 0x6c, 0x1c, 0x05, 0x28,
	0x17, 0x54, 0x52, 0xc4, 0x81, 0x03, 0x10, 0x12, 0x2c, 0xc7, 0x98, 0x0d, 0xe0, 0x50, 0x4a, 0x52,
	0x40, 0x71, 0xd8, 0x1a, 0xaf, 0x26, 0xb1, 0xaa, 0xb4, 0xab, 0xcd, 0x6a, 0x9c, 0xb0, 0x17, 0x4e,
	0x3c, 0x04, 0x07, 0xae, 0x14, 0xcf, 0xc0, 0x85, 0x33, 0x47, 0x1e, 0x81, 0x0a, 0x07, 0x4e, 0x14,
	0xaf, 0x40, 0x4d, 0xcf, 0xcc, 0xee, 0x48, 0x2b, 0x89, 0xc4, 0xce, 0x91, 0x9b, 0xa6, 0xa7, 0xa7,
	0xe7, 0xeb, 0xee, 0x6f, 0xba, 0x67, 0x04, 0x73, 0xbd, 0xe8, 0x64, 0x14, 0xb3, 0xab, 0xc3, 0x51,
	0xc4, 0x23, 0xb2, 0x20, 0x47, 0xdd, 0x98, 0x8d, 0x9e, 0x04, 0x3d, 0xe6, 0x00, 0xd4, 0xf7, 0xfb,
	0x43, 0x3e, 0xf6, 0x58, 0xec, 0x6c, 0x80, 0xed, 0xb1, 0xc7, 0x64, 0x05, 0xaa, 0x31, 0xa7, 0xfc,
	0x24, 0x6e, 0x59, 0x5b, 0xd6, 0x76, 0xdd, 0x53, 0x23, 0xe7, 0x35, 0xa8, 0x1d, 0x30, 0xee, 0xd2,
	0x30, 0x24, 0x6b, 0x50, 0x7f, 0x34, 0x8a, 0x4e, 0x86, 0xdd, 0xc0, 0x6f, 0x95, 0xb6, 0xac, 0xed,
	0x86, 0x57, 0xc3, 0x71, 0xc7, 0x77, 0x7e, 0xb4, 0xa0, 0xb6, 0xff, 0x2d, 0xed, 0x0f, 0x43, 0x46,
	0xd6, 0xa1, 0xf1, 0x34, 0xe0, 0xc7, 0x5d, 0x9f, 0x72, 0x86, 0xc6, 0x1a, 0x5e, 0x5d, 0x08, 0x6e,
	0x53, 0xce, 0x48, 0x0b, 0x6a, 0xbd, 0xa8, 0xdf, 0x67, 0x03, 0xae, 0x4d, 0xa8, 0x21, 0xd9, 0x82,
	0xe6, 0x90, 0x8e, 0x78, 0xd0, 0x0b, 0x86, 0x62, 0xa1, 0x8d, 0xb3, 0xa6, 0x88, 0x6c, 0x00, 0xc4,
	0xfc, 0xc4, 0x67, 0x03, 0x2e, 0x10, 0x94, 0x51, 0xa1, 0xa1, 0x24, 0x1d, 0x3f, 0x01, 0xaf, 0x92,
	0x84, 0xf7, 0x14, 0x40, 0xa1, 0x73, 0x69, 0x58, 0x0c, 0x90, 0x40, 0xf9, 0x88, 0x86, 0xa1, 0x42,
	0x87, 0xdf, 0xa9, 0x8d, 0xed, 0xa2, 0x8d, 0xcb, 0xc9, 0x8d, 0xdf, 0x82, 0x85, 0x03, 0xc6, 0xbf,
	0x30, 0x9c, 0x28, 0x08, 0xe2, 0xaf, 0x16, 0xd8, 0x02, 0xdf, 0x02, 0x94, 0x02, 0x5f, 0x01, 0x2b,
	0x05, 0x7e, 0x02, 0x52, 0x45, 0x41, 0x4a, 0xf8, 0x60, 0xa7, 0x7c, 0xc8, 0x07, 0x94, 0x72, 0xa5,
	0x92, 0x76, 0x65, 0x03, 0xa0, 0x37, 0x62, 0x94, 0x33, 0xbf, 0x4b, 0x79, 0xab, 0x2a, 0xa7, 0x95,
	0x64, 0x97, 0x8b, 0xe9, 0x93, 0xa1, 0xaf, 0xa7, 0x6b, 0x72, 0x5a, 0x49, 0x76, 0xb9, 0x73, 0x1d,
	0x40, 0x10, 0x65, 0x0f, 0xf5, 0xc9, 0xeb, 0x60, 0x1f, 0xd1, 0xb0, 0x65, 0x6d, 0xd9, 0xdb, 0xcd,
	0x9d, 0xe5, 0xab, 0x49, 0x0a, 0x5e, 0x75, 0x69, 0xe8, 0x89, 0x79, 0xe7, 0x03, 0xa8, 0x7f, 0xa9,
	0x81, 0xbf, 0x68, 0x66, 0x9c, 0x01, 0x2c, 0xeb, 0xc5, 0x66, 0x90, 0x0b, 0xed, 0xa4, 0x88, 0x56,
	0x42, 0xba, 0x27, 0x88, 0x66, 0x90, 0xd4, 0x4e, 0x90, 0xd4, 0xf9, 0xde, 0x42, 0x17, 0xef, 0xc9,
	0x80, 0x91, 0x9d, 0x44, 0x34, 0xc5, 0x46, 0x59, 0x9e, 0x8e, 0x0f, 0xcd, 0x10, 0xbb, 0xb0, 0xa8,
	0xd7, 0xd0, 0x30, 0xec, 0x1e, 0xd1, 0x30, 0x6e, 0x95, 0x30, 0x46, 0xad, 0xf4, 0x4a, 0xed, 0x9a,
	0xb7, 0xa0, 0x56, 0xec, 0x86, 0xa1, 0x4b, 0xc3, 0xd8, 0xf9, 0xc9, 0x02, 0x62, 0xf8, 0x7b, 0x16,
	0x38, 0xdf, 0xc0, 0xaa, 0x09, 0x27, 0x19, 0x19, 0x81, 0xea, 0x72, 0x1e, 0x2a, 0x03, 0x80, 0x77,
	0x61, 0x0a, 0xd0, 0x10, 0x3b, 0x3f, 0x97, 0xa0, 0x99, 0x47, 0x7e, 0x6b, 0x86, 0x98, 0x72, 0x6a,
	0x40, 0xfb, 0x4c, 0xe5, 0xb8, 0x81, 0x92, 0x43, 0xda, 0xc7, 0xb3, 0xcf, 0x19, 0xed, 0x1d, 0xb3,
	0x91, 0x71, 0x04, 0x95, 0xa4, 0xe3, 0x93, 0x4b, 0x30, 0xa7, 0xa7, 0x71, 0xbd, 0x64, 0x7d, 0x53,
	0xc9, 0xd0, 0x42, 0x82, 0x13, 0x95, 0x14, 0x27, 0x36, 0x00, 0x8e, 0xd8, 0xa3, 0x60, 0xd0, 0xe5,
	0x41, 0x9f, 0x69, 0xde, 0xa3, 0xe4, 0x7e, 0x20, 0x77, 0xef, 0x85, 0x51, 0xcc, 0xe4, 0xb4, 0xe2,
	0x3d, 0x4a, 0x70, 0x7a, 0x17, 0x96, 0x8c, 0xb8, 0x75, 0x7b, 0xd1, 0xc9, 0x80, 0xb7, 0xea, 0x18,
	0xbd, 0xf3, 0xe9, 0xe8, 0x79, 0x2c, 0x1e, 0x7a, 0x8b, 0x86, 0xfa, 0x9e, 0xd0, 0x76, 0x3e, 0x87,
	0x39, 0x23, 0x50, 0x31, 0xf9, 0x30, 0x49, 0x52, 0x79, 0x88, 0xd6, 0xd3, 0xc6, 0xcc, 0x14, 0x98,
	0xfa, 0xce, 0x27, 0xd0, 0x74, 0x69, 0xf8, 0x59, 0x10, 0x73, 0xb1, 0x1f, 0x79, 0x4f, 0x07, 0x17,
	0xd9, 0x26, 0x8d, 0xb5, 0x33, 0x4e, 0xa4, 0x22, 0x92, 0x0a, 0x3c, 0x52, 0xed, 0x21, 0x2c, 0x1b,
	0xbb, 0x4c, 0x2c, 0xde, 0x85, 0x25, 0x69, 0x71, 0x16, 0xa5, 0x53, 0x80, 0x52, 0x6f, 0xb0, 0x88,
	0x8b, 0x4d, 0xaa, 0xfc, 0x63, 0x43, 0xe5, 0x40, 0x08, 0xb3, 0xca, 0x9f, 0xc1, 0x09, 0xfc, 0x26,
	0x0e, 0xcc, 0x8b, 0x3c, 0x76, 0xa3, 0x87, 0x5d, 0xcc, 0x92, 0x6e, 0x17, 0x42, 0x78, 0xf7, 0xa1,
	0x2b, 0x44, 0xa6, 0x0e, 0xa6, 0x4a, 0x93, 0x42, 0xea, 0xec, 0x09, 0x91, 0x41, 0x8a, 0x71, 0x9c,
	0x24, 0xc5, 0x38, 0x3e, 0x23, 0x29, 0x56, 0xa0, 0x1a, 0xb2, 0x38, 0x8e, 0x06, 0xad, 0x3a, 0x4e,
	0xa9, 0x91, 0x59, 0x5c, 0x1a, 0xc9, 0x0e, 0xb8, 0x02, 0x55, 0xda, 0xe3, 0xc1, 0x13, 0xd6, 0x02,
	0xb9, 0x42, 0x8e, 0x04, 0xb9, 0xfd, 0x60, 0xc4, 0x7a, 0x3c, 0x88, 0x06, 0x82, 0xfd, 0x4d, 0xe5,
	0x87, 0x96, 0xc9, 0xd3, 0x63, 0x1c, 0x8f, 0xb9, 0xf4, 0xf1, 0x78, 0x15, 0x9a, 0x34, 0x0e, 0x62,
	0xae, 0x2a, 0xc3, 0xfc, 0x96, 0xbd, 0xdd, 0xf0, 0x40, 0x8b, 0x3a, 0xbe, 0x88, 0xc3, 0xd1, 0x88,
	0x0e, 0x7a, 0xc7, 0x62, 0x7a, 0x41, 0xc6, 0x41, 0x0a, 0x3a, 0x3e, 0x59, 0x85, 0xda, 0x28, 0x8a,
	0xfa, 0x62, 0xea, 0x9c, 0x04, 0x26, 0x86, 0x33, 0xdd, 0x62, 0xb1, 0xb8, 0x5b, 0x2c, 0xa5, 0xbb,
	0xc5, 0x5f, 0x65, 0x68, 0x60, 0xc6, 0x91, 0x50, 0xff, 0x67, 0x3d, 0x95, 0xf5, 0xb7, 0xa1, 0x31,
	0xc9, 0x30, 0xa6, 0xbc, 0xb9, 0x43, 0x66, 0x6b, 0xb9, 0x37, 0x55, 0x22, 0x57, 0xa0, 0xa6, 0x52,
	0x8e, 0x0c, 0xc8, 0xac, 0xfd, 0xdc, 0xd3, 0x3a, 0xe4, 0x1a, 0x34, 0x68, 0xac, 0x28, 0x80, 0x94,
	0xc8, 0x59, 0x30, 0xd5, 0x22, 0x6f, 0x42, 0x55, 0xb2, 0x02, 0x39, 0x92, 0x0d, 0x48, 0x69, 0x90,
	0x37, 0xa0, 0x2c, 0x68, 0x82, 0x94, 0xc9, 0xd6, 0xc4, 0x79, 0x72, 0x19, 0xe6, 0xb1, 0x60, 0x76,
	0x55, 0x0b, 0x51, 0x3c, 0x9a, 0x43, 0xa1, 0xee, 0x6c, 0x49, 0xa6, 0x2d, 0x15, 0x33, 0x8d, 0xa4,
	0x99, 0xf6, 0xb7, 0x05, 0xb0, 0xcb, 0x39, 0x1b, 0xf8, 0x74, 0xd0, 0x63, 0x33, 0x54, 0x3b, 0xcb,
	0x9d, 0x34, 0xd1, 0x55, 0xca, 0x05, 0xf7, 0xb0, 0x4a, 0xd1, 0x3d, 0xac, 0x5a, 0x7c, 0x0f, 0xab,
	0x15, 0xfb, 0x5b, 0x4f, 0xfb, 0x7b, 0x17, 0x96, 0xa6, 0xee, 0xca, 0xdb, 0x58, 0x4c, 0xde, 0x07,
	0xa0, 0x13, 0x61, 0x5e, 0x0f, 0x98, 0x2e, 0xf3, 0x0c, 0x6d, 0xe7, 0x18, 0xc8, 0x74, 0x66, 0xd2,
	0x03, 0x6e, 0x40, 0x73, 0xaa, 0x13, 0x3f, 0x87, 0x49, 0x53, 0x9d, 0x9c, 0x87, 0x8a, 0x6c, 0x94,
	0x22, 0xe6, 0xb6, 0x27, 0x07, 0xce, 0x3e, 0x34, 0x76, 0x27, 0x74, 0x2b, 0xbe, 0x2e, 0x18, 0x05,
	0xaf, 0x94, 0x2a, 0x78, 0xce, 0x36, 0x94, 0xdc, 0xf1, 0xf3, 0xd4, 0x14, 0xe7, 0x16, 0xd8, 0xee,
	0xf8, 0xf0, 0xb9, 0xca, 0xcf, 0x79, 0xa8, 0x0c, 0x8f, 0xa3, 0x81, 0xe6, 0x81, 0x1c, 0x38, 0xdf,
	0x41, 0xd5, 0x1d, 0x63, 0x3c, 0xf4, 0x1a, 0xcb, 0x58, 0x73, 0x05, 0x6a, 0x9a, 0xd7, 0xa5, 0xbc,
	0x23, 0x76, 0xe8, 0x69, 0x1d, 0x72, 0x0d, 0x6a, 0x4c, 0x3e, 0x54, 0x5a, 0x36, 0xaa, 0xaf, 0xa6,
	0xd5, 0xd5, 0x3b, 0xc6, 0xd3, 0x7a, 0xe2, 0x4a, 0xda, 0x70, 0xc7, 0xe2, 0x3a, 0xfd, 0x92, 0x30,
	0xbc, 0x93, 0xc6, 0xd0, 0xce, 0xc1, 0x20, 0xf6, 0x9c, 0xc0, 0xe8, 0x8a, 0x38, 0xf2, 0xd3, 0xc7,
	0x91, 0x6c, 0x02, 0x0c, 0xd9, 0xa8, 0x1f, 0xc4, 0xb1, 0x28, 0x78, 0xf2, 0x28, 0x19, 0x12, 0xe7,
	0x2b, 0x98, 0xc7, 0x6e, 0x31, 0xa1, 0xdf, 0x35, 0xa8, 0x22, 0x1b, 0x34, 0xf3, 0xd6, 0xd2, 0x30,
	0x27, 0xcd, 0xc5, 0x53, 0x8a, 0x39, 0x9c, 0xfb, 0x1a, 0x16, 0x26, 0x96, 0xe3, 0x97, 0x6b, 0x7a,
	0x0d, 0x6a, 0xee, 0xb8, 0xe3, 0x8b, 0x07, 0x76, 0x2a, 0x32, 0x4e, 0x0c, 0x35, 0xe9, 0xca, 0x63,
	0x51, 0x80, 0x74, 0xe1, 0x56, 0x34, 0xd7, 0x35, 0xfa, 0xa2, 0xd9, 0x04, 0x14, 0xcb, 0xa7, 0x05,
	0xbf, 0x35, 0x4d, 0xac, 0x7a, 0xa7, 0xe8, 0x1c, 0x4e, 0x9b, 0x4a, 0xd5, 0x6c, 0x2a, 0xce, 0x45,
	0x28, 0xa3, 0x83, 0x13, 0xb4, 0x56, 0xea, 0xf0, 0x09, 0x48, 0x12, 0x2f, 0x81, 0xf2, 0x90, 0x3e,
	0x62, 0x4a, 0x03, 0xbf, 0xc5, 0xb2, 0x30, 0xe8, 0x07, 0x13, 0x27, 0x71, 0xa0, 0x3c, 0xb3, 0x27,
	0x9e, 0x75, 0xa0, 0x29, 0xcc, 0x88, 0x77, 0xc2, 0x8b, 0x19, 0x5a, 0x04, 0xdb, 0xa7, 0x63, 0xb4,
	0x64, 0x7b, 0xe2, 0x73, 0xe7, 0x17, 0x80, 0xf9, 0x3d, 0x0c, 0xfd, 0x3d, 0x19, 0x79, 0x72, 0x0b,
	0x9a, 0x18, 0x7c, 0xf5, 0xc8, 0xbc, 0x90, 0x99, 0x99, 0x76, 0x7e, 0xc2, 0xc8, 0x4d, 0xa8, 0xe3,
	0xe0, 0x80, 0x71, 0xb2, 0x3a, 0x7b, 0x10, 0xd0, 0xf9, 0xa2, 0xf5, 0xb7, 0xd5, 0xad, 0x45, 0xb8,
	0x38, 0x6b, 0x40, 0xa5, 0xb4, 0xbd, 0x99, 0x69, 0x60, 0xca, 0xb0, 0x4f, 0x15, 0x9b, 0x45, 0x90,
	0xd0, 0xd2, 0x7a, 0x96, 0x25, 0x15, 0xc2, 0xf6, 0x46, 0xae, 0x35, 0x34, 0x76, 0x47, 0x19, 0xf3,
	0xa2, 0xa8, 0x8f, 0xc6, 0xd6, 0xb2, 0x8c, 0x49, 0xcf, 0xfe, 0x0b, 0xd8, 0xc7, 0xb0, 0x8c, 0x92,
	0x64, 0xbd, 0xcf, 0x8f, 0xd4, 0x4a, 0x46, 0x63, 0x17, 0x76, 0x5c, 0x98, 0x3b, 0x50, 0x8f, 0x88,
	0x62, 0x03, 0x6b, 0xb3, 0x13, 0xba, 0x98, 0xe9, 0x5c, 0x3f, 0xc0, 0xce, 0x76, 0x8a, 0x5c, 0x7f,
	0xa4, 0x0c, 0xdc, 0x66, 0x21, 0xe3, 0x2c, 0x1f, 0xc3, 0xcc, 0xcb, 0x5b, 0xff, 0x1d, 0x23, 0x1d,
	0x98, 0xbb, 0x2f, 0xcf, 0xa2, 0x7c, 0x9c, 0x9c, 0x21, 0xb2, 0x77, 0x60, 0x31, 0xdd, 0x95, 0xc9,
	0xa5, 0xfc, 0x6e, 0xa9, 0xfa, 0x76, 0x7b, 0x79, 0xf6, 0x05, 0xf9, 0x98, 0x3c, 0x80, 0x85, 0x54,
	0x82, 0x66, 0x77, 0x4f, 0xfc, 0x77, 0x6a, 0x5f, 0x2e, 0x78, 0x95, 0x4d, 0x88, 0xd4, 0x81, 0x73,
	0xe6, 0x93, 0x52, 0x88, 0x72, 0x43, 0xd3, 0xbe, 0x58, 0x60, 0x31, 0x26, 0x7b, 0xa6, 0xb7, 0x2a,
	0x81, 0x05, 0x77, 0x83, 0x6c, 0x37, 0xf7, 0x4d, 0x23, 0xa7, 0x4f, 0xe2, 0x0d, 0x68, 0xb8, 0x54,
	0xff, 0x96, 0xca, 0x7a, 0xf7, 0xaa, 0xb9, 0x6c, 0x10, 0xef, 0xe2, 0x6a, 0xe5, 0x42, 0xd6, 0x7f,
	0xac, 0x76, 0x96, 0x90, 0xdc, 0x82, 0x5a, 0x2e, 0xf7, 0xd5, 0x1f, 0xd5, 0xf6, 0x7a, 0xc6, 0xc2,
	0x49, 0x32, 0x6e, 0xe2, 0xbe, 0xa7, 0xf6, 0xda, 0x5d, 0xfc, 0xed, 0xd9, 0xa6, 0xf5, 0xfb, 0xb3,
	0x4d, 0xeb, 0x8f, 0x67, 0x9b, 0xd6, 0x0f, 0x7f, 0x6e, 0xbe, 0x72, 0x54, 0xc5, 0xbf, 0xc1, 0xd7,
	0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x1b, 0x0f, 0x4f, 0x1d, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CourseServiceClient is the client API for CourseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CourseServiceClient interface {
	GroupCreate(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupResp, error)
	GroupGet(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*GroupResp, error)
	GroupList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*GroupListsResp, error)
	GroupWithList(ctx context.Context, in *ListWithReq, opts ...grpc.CallOption) (*GroupListResp, error)
	GroupRoomList(ctx context.Context, in *ListIdReq, opts ...grpc.CallOption) (*GroupListsResp, error)
	GroupAttendanceList(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*ByResp, error)
	GroupBalList(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*ByBalResp, error)
	GroupUpdate(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupResp, error)
	GroupDelete(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*EmptyRes, error)
	TeacherGroup(ctx context.Context, in *ListIdReq, opts ...grpc.CallOption) (*GroupListsResp, error)
	AttendanceCreate(ctx context.Context, in *AttendanceCreates, opts ...grpc.CallOption) (*Req, error)
	AttendanceList(ctx context.Context, in *GetParticipate, opts ...grpc.CallOption) (*ParticipateListResp, error)
	ParticipateResp(ctx context.Context, in *EmptyRes, opts ...grpc.CallOption) (*Participates, error)
	AttendanceUpdate(ctx context.Context, in *Attendance, opts ...grpc.CallOption) (*Req, error)
	AttendanceDelete(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*EmptyRes, error)
	BalCreate(ctx context.Context, in *BallCreate, opts ...grpc.CallOption) (*Req, error)
	BalUpdate(ctx context.Context, in *Bal, opts ...grpc.CallOption) (*Bal, error)
	BalList(ctx context.Context, in *GetBall, opts ...grpc.CallOption) (*BalListResp, error)
	BalDelete(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*EmptyRes, error)
}

type courseServiceClient struct {
	cc *grpc.ClientConn
}

func NewCourseServiceClient(cc *grpc.ClientConn) CourseServiceClient {
	return &courseServiceClient{cc}
}

func (c *courseServiceClient) GroupCreate(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupResp, error) {
	out := new(GroupResp)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/GroupCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GroupGet(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*GroupResp, error) {
	out := new(GroupResp)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/GroupGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GroupList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*GroupListsResp, error) {
	out := new(GroupListsResp)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/GroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GroupWithList(ctx context.Context, in *ListWithReq, opts ...grpc.CallOption) (*GroupListResp, error) {
	out := new(GroupListResp)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/GroupWithList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GroupRoomList(ctx context.Context, in *ListIdReq, opts ...grpc.CallOption) (*GroupListsResp, error) {
	out := new(GroupListsResp)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/GroupRoomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GroupAttendanceList(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*ByResp, error) {
	out := new(ByResp)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/GroupAttendanceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GroupBalList(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*ByBalResp, error) {
	out := new(ByBalResp)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/GroupBalList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GroupUpdate(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupResp, error) {
	out := new(GroupResp)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/GroupUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GroupDelete(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/GroupDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) TeacherGroup(ctx context.Context, in *ListIdReq, opts ...grpc.CallOption) (*GroupListsResp, error) {
	out := new(GroupListsResp)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/TeacherGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) AttendanceCreate(ctx context.Context, in *AttendanceCreates, opts ...grpc.CallOption) (*Req, error) {
	out := new(Req)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/AttendanceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) AttendanceList(ctx context.Context, in *GetParticipate, opts ...grpc.CallOption) (*ParticipateListResp, error) {
	out := new(ParticipateListResp)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/AttendanceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) ParticipateResp(ctx context.Context, in *EmptyRes, opts ...grpc.CallOption) (*Participates, error) {
	out := new(Participates)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/ParticipateResp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) AttendanceUpdate(ctx context.Context, in *Attendance, opts ...grpc.CallOption) (*Req, error) {
	out := new(Req)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/AttendanceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) AttendanceDelete(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/AttendanceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) BalCreate(ctx context.Context, in *BallCreate, opts ...grpc.CallOption) (*Req, error) {
	out := new(Req)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/BalCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) BalUpdate(ctx context.Context, in *Bal, opts ...grpc.CallOption) (*Bal, error) {
	out := new(Bal)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/BalUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) BalList(ctx context.Context, in *GetBall, opts ...grpc.CallOption) (*BalListResp, error) {
	out := new(BalListResp)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/BalList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) BalDelete(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	out := new(EmptyRes)
	err := c.cc.Invoke(ctx, "/course_service.CourseService/BalDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServiceServer is the server API for CourseService service.
type CourseServiceServer interface {
	GroupCreate(context.Context, *Group) (*GroupResp, error)
	GroupGet(context.Context, *ByIdReq) (*GroupResp, error)
	GroupList(context.Context, *ListReq) (*GroupListsResp, error)
	GroupWithList(context.Context, *ListWithReq) (*GroupListResp, error)
	GroupRoomList(context.Context, *ListIdReq) (*GroupListsResp, error)
	GroupAttendanceList(context.Context, *ByIdReq) (*ByResp, error)
	GroupBalList(context.Context, *ByIdReq) (*ByBalResp, error)
	GroupUpdate(context.Context, *Group) (*GroupResp, error)
	GroupDelete(context.Context, *ByIdReq) (*EmptyRes, error)
	TeacherGroup(context.Context, *ListIdReq) (*GroupListsResp, error)
	AttendanceCreate(context.Context, *AttendanceCreates) (*Req, error)
	AttendanceList(context.Context, *GetParticipate) (*ParticipateListResp, error)
	ParticipateResp(context.Context, *EmptyRes) (*Participates, error)
	AttendanceUpdate(context.Context, *Attendance) (*Req, error)
	AttendanceDelete(context.Context, *ByIdReq) (*EmptyRes, error)
	BalCreate(context.Context, *BallCreate) (*Req, error)
	BalUpdate(context.Context, *Bal) (*Bal, error)
	BalList(context.Context, *GetBall) (*BalListResp, error)
	BalDelete(context.Context, *ByIdReq) (*EmptyRes, error)
}

// UnimplementedCourseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCourseServiceServer struct {
}

func (*UnimplementedCourseServiceServer) GroupCreate(ctx context.Context, req *Group) (*GroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupCreate not implemented")
}
func (*UnimplementedCourseServiceServer) GroupGet(ctx context.Context, req *ByIdReq) (*GroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupGet not implemented")
}
func (*UnimplementedCourseServiceServer) GroupList(ctx context.Context, req *ListReq) (*GroupListsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupList not implemented")
}
func (*UnimplementedCourseServiceServer) GroupWithList(ctx context.Context, req *ListWithReq) (*GroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupWithList not implemented")
}
func (*UnimplementedCourseServiceServer) GroupRoomList(ctx context.Context, req *ListIdReq) (*GroupListsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupRoomList not implemented")
}
func (*UnimplementedCourseServiceServer) GroupAttendanceList(ctx context.Context, req *ByIdReq) (*ByResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAttendanceList not implemented")
}
func (*UnimplementedCourseServiceServer) GroupBalList(ctx context.Context, req *ByIdReq) (*ByBalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupBalList not implemented")
}
func (*UnimplementedCourseServiceServer) GroupUpdate(ctx context.Context, req *Group) (*GroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUpdate not implemented")
}
func (*UnimplementedCourseServiceServer) GroupDelete(ctx context.Context, req *ByIdReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDelete not implemented")
}
func (*UnimplementedCourseServiceServer) TeacherGroup(ctx context.Context, req *ListIdReq) (*GroupListsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherGroup not implemented")
}
func (*UnimplementedCourseServiceServer) AttendanceCreate(ctx context.Context, req *AttendanceCreates) (*Req, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttendanceCreate not implemented")
}
func (*UnimplementedCourseServiceServer) AttendanceList(ctx context.Context, req *GetParticipate) (*ParticipateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttendanceList not implemented")
}
func (*UnimplementedCourseServiceServer) ParticipateResp(ctx context.Context, req *EmptyRes) (*Participates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipateResp not implemented")
}
func (*UnimplementedCourseServiceServer) AttendanceUpdate(ctx context.Context, req *Attendance) (*Req, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttendanceUpdate not implemented")
}
func (*UnimplementedCourseServiceServer) AttendanceDelete(ctx context.Context, req *ByIdReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttendanceDelete not implemented")
}
func (*UnimplementedCourseServiceServer) BalCreate(ctx context.Context, req *BallCreate) (*Req, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalCreate not implemented")
}
func (*UnimplementedCourseServiceServer) BalUpdate(ctx context.Context, req *Bal) (*Bal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalUpdate not implemented")
}
func (*UnimplementedCourseServiceServer) BalList(ctx context.Context, req *GetBall) (*BalListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalList not implemented")
}
func (*UnimplementedCourseServiceServer) BalDelete(ctx context.Context, req *ByIdReq) (*EmptyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalDelete not implemented")
}

func RegisterCourseServiceServer(s *grpc.Server, srv CourseServiceServer) {
	s.RegisterService(&_CourseService_serviceDesc, srv)
}

func _CourseService_GroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/GroupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GroupCreate(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GroupGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GroupGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/GroupGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GroupGet(ctx, req.(*ByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/GroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GroupList(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GroupWithList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GroupWithList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/GroupWithList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GroupWithList(ctx, req.(*ListWithReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GroupRoomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GroupRoomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/GroupRoomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GroupRoomList(ctx, req.(*ListIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GroupAttendanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GroupAttendanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/GroupAttendanceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GroupAttendanceList(ctx, req.(*ByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GroupBalList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GroupBalList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/GroupBalList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GroupBalList(ctx, req.(*ByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/GroupUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GroupUpdate(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GroupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/GroupDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GroupDelete(ctx, req.(*ByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_TeacherGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).TeacherGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/TeacherGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).TeacherGroup(ctx, req.(*ListIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_AttendanceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttendanceCreates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).AttendanceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/AttendanceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).AttendanceCreate(ctx, req.(*AttendanceCreates))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_AttendanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParticipate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).AttendanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/AttendanceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).AttendanceList(ctx, req.(*GetParticipate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_ParticipateResp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).ParticipateResp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/ParticipateResp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).ParticipateResp(ctx, req.(*EmptyRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_AttendanceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Attendance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).AttendanceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/AttendanceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).AttendanceUpdate(ctx, req.(*Attendance))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_AttendanceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).AttendanceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/AttendanceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).AttendanceDelete(ctx, req.(*ByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_BalCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BallCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).BalCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/BalCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).BalCreate(ctx, req.(*BallCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_BalUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).BalUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/BalUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).BalUpdate(ctx, req.(*Bal))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_BalList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).BalList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/BalList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).BalList(ctx, req.(*GetBall))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_BalDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).BalDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course_service.CourseService/BalDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).BalDelete(ctx, req.(*ByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "course_service.CourseService",
	HandlerType: (*CourseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GroupCreate",
			Handler:    _CourseService_GroupCreate_Handler,
		},
		{
			MethodName: "GroupGet",
			Handler:    _CourseService_GroupGet_Handler,
		},
		{
			MethodName: "GroupList",
			Handler:    _CourseService_GroupList_Handler,
		},
		{
			MethodName: "GroupWithList",
			Handler:    _CourseService_GroupWithList_Handler,
		},
		{
			MethodName: "GroupRoomList",
			Handler:    _CourseService_GroupRoomList_Handler,
		},
		{
			MethodName: "GroupAttendanceList",
			Handler:    _CourseService_GroupAttendanceList_Handler,
		},
		{
			MethodName: "GroupBalList",
			Handler:    _CourseService_GroupBalList_Handler,
		},
		{
			MethodName: "GroupUpdate",
			Handler:    _CourseService_GroupUpdate_Handler,
		},
		{
			MethodName: "GroupDelete",
			Handler:    _CourseService_GroupDelete_Handler,
		},
		{
			MethodName: "TeacherGroup",
			Handler:    _CourseService_TeacherGroup_Handler,
		},
		{
			MethodName: "AttendanceCreate",
			Handler:    _CourseService_AttendanceCreate_Handler,
		},
		{
			MethodName: "AttendanceList",
			Handler:    _CourseService_AttendanceList_Handler,
		},
		{
			MethodName: "ParticipateResp",
			Handler:    _CourseService_ParticipateResp_Handler,
		},
		{
			MethodName: "AttendanceUpdate",
			Handler:    _CourseService_AttendanceUpdate_Handler,
		},
		{
			MethodName: "AttendanceDelete",
			Handler:    _CourseService_AttendanceDelete_Handler,
		},
		{
			MethodName: "BalCreate",
			Handler:    _CourseService_BalCreate_Handler,
		},
		{
			MethodName: "BalUpdate",
			Handler:    _CourseService_BalUpdate_Handler,
		},
		{
			MethodName: "BalList",
			Handler:    _CourseService_BalList_Handler,
		},
		{
			MethodName: "BalDelete",
			Handler:    _CourseService_BalDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "course.proto",
}

func (m *EmptyRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Req) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Req) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Example) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Example) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Example) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Participate) > 0 {
		i -= len(m.Participate)
		copy(dAtA[i:], m.Participate)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Participate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WithDate) > 0 {
		i -= len(m.WithDate)
		copy(dAtA[i:], m.WithDate)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.WithDate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExampleBal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExampleBal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExampleBal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ball) > 0 {
		i -= len(m.Ball)
		copy(dAtA[i:], m.Ball)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Ball)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WithDate) > 0 {
		i -= len(m.WithDate)
		copy(dAtA[i:], m.WithDate)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.WithDate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetParticipate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetParticipate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetParticipate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Bal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WithDate) > 0 {
		i -= len(m.WithDate)
		copy(dAtA[i:], m.WithDate)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.WithDate)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ball != 0 {
		i = encodeVarintCourse(dAtA, i, uint64(m.Ball))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BallCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BallCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BallCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Bal) > 0 {
		for iNdEx := len(m.Bal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WithDate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithDate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithDate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ball) > 0 {
		i -= len(m.Ball)
		copy(dAtA[i:], m.Ball)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Ball)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WithDate) > 0 {
		i -= len(m.WithDate)
		copy(dAtA[i:], m.WithDate)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.WithDate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithDateParticipate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithDateParticipate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithDateParticipate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Participate {
		i--
		if m.Participate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.WithDate) > 0 {
		i -= len(m.WithDate)
		copy(dAtA[i:], m.WithDate)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.WithDate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BalStudent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalStudent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalStudent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StudentAllBals) > 0 {
		for iNdEx := len(m.StudentAllBals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StudentAllBals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.StudentId != nil {
		{
			size, err := m.StudentId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParticipateStudent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipateStudent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipateStudent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StudentAllParticipate) > 0 {
		for iNdEx := len(m.StudentAllParticipate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StudentAllParticipate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.StudentId != nil {
		{
			size, err := m.StudentId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Participate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Participate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Participate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ParticipateCount) > 0 {
		for iNdEx := len(m.ParticipateCount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParticipateCount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.CloseTime) > 0 {
		i -= len(m.CloseTime)
		copy(dAtA[i:], m.CloseTime)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.CloseTime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BeginTime) > 0 {
		i -= len(m.BeginTime)
		copy(dAtA[i:], m.BeginTime)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.BeginTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.WithDate) > 0 {
		i -= len(m.WithDate)
		copy(dAtA[i:], m.WithDate)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.WithDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TeacherName) > 0 {
		i -= len(m.TeacherName)
		copy(dAtA[i:], m.TeacherName)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.TeacherName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TeacherId) > 0 {
		i -= len(m.TeacherId)
		copy(dAtA[i:], m.TeacherId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.TeacherId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Participates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Participates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Participates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Participate) > 0 {
		for iNdEx := len(m.Participate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BalListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupBals) > 0 {
		for iNdEx := len(m.GroupBals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupBals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ParticipateListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipateListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipateListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupParticipate) > 0 {
		for iNdEx := len(m.GroupParticipate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupParticipate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.RoomId) > 0 {
		i -= len(m.RoomId)
		copy(dAtA[i:], m.RoomId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.RoomId)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.BranchId) > 0 {
		i -= len(m.BranchId)
		copy(dAtA[i:], m.BranchId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.BranchId)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.AsistentId) > 0 {
		for iNdEx := len(m.AsistentId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AsistentId[iNdEx])
			copy(dAtA[i:], m.AsistentId[iNdEx])
			i = encodeVarintCourse(dAtA, i, uint64(len(m.AsistentId[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.TeacherId) > 0 {
		i -= len(m.TeacherId)
		copy(dAtA[i:], m.TeacherId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.TeacherId)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.DirectionId) > 0 {
		i -= len(m.DirectionId)
		copy(dAtA[i:], m.DirectionId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.DirectionId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Active) > 0 {
		i -= len(m.Active)
		copy(dAtA[i:], m.Active)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Active)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Lesson) > 0 {
		i -= len(m.Lesson)
		copy(dAtA[i:], m.Lesson)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Lesson)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CloseTime) > 0 {
		i -= len(m.CloseTime)
		copy(dAtA[i:], m.CloseTime)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.CloseTime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BeginTime) > 0 {
		i -= len(m.BeginTime)
		copy(dAtA[i:], m.BeginTime)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.BeginTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.WithDays) > 0 {
		i -= len(m.WithDays)
		copy(dAtA[i:], m.WithDays)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.WithDays)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DateOfClose) > 0 {
		i -= len(m.DateOfClose)
		copy(dAtA[i:], m.DateOfClose)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.DateOfClose)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DateOfBegin) > 0 {
		i -= len(m.DateOfBegin)
		copy(dAtA[i:], m.DateOfBegin)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.DateOfBegin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.CountStudent) > 0 {
		i -= len(m.CountStudent)
		copy(dAtA[i:], m.CountStudent)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.CountStudent)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Branch != nil {
		{
			size, err := m.Branch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.Assistent) > 0 {
		for iNdEx := len(m.Assistent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assistent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.Teacher != nil {
		{
			size, err := m.Teacher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Direction != nil {
		{
			size, err := m.Direction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Active) > 0 {
		i -= len(m.Active)
		copy(dAtA[i:], m.Active)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Active)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Lesson) > 0 {
		i -= len(m.Lesson)
		copy(dAtA[i:], m.Lesson)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Lesson)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CloseTime) > 0 {
		i -= len(m.CloseTime)
		copy(dAtA[i:], m.CloseTime)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.CloseTime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BeginTime) > 0 {
		i -= len(m.BeginTime)
		copy(dAtA[i:], m.BeginTime)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.BeginTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.WithDays) > 0 {
		i -= len(m.WithDays)
		copy(dAtA[i:], m.WithDays)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.WithDays)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DateOfClose) > 0 {
		i -= len(m.DateOfClose)
		copy(dAtA[i:], m.DateOfClose)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.DateOfClose)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DateOfBegin) > 0 {
		i -= len(m.DateOfBegin)
		copy(dAtA[i:], m.DateOfBegin)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.DateOfBegin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Attendance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attendance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attendance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WithDate) > 0 {
		i -= len(m.WithDate)
		copy(dAtA[i:], m.WithDate)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.WithDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Participate) > 0 {
		i -= len(m.Participate)
		copy(dAtA[i:], m.Participate)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Participate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttendanceCreates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttendanceCreates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttendanceCreates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Attendance) > 0 {
		for iNdEx := len(m.Attendance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attendance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AttendanceListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttendanceListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttendanceListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintCourse(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Attendances) > 0 {
		for iNdEx := len(m.Attendances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attendances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Assistent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Assistent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Assistent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TeacherId) > 0 {
		i -= len(m.TeacherId)
		copy(dAtA[i:], m.TeacherId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.TeacherId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *By) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *By) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *By) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ByN) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByN) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ByN) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ByResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ByResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Example) > 0 {
		for iNdEx := len(m.Example) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Example[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Student) > 0 {
		for iNdEx := len(m.Student) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Student[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ByBalResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByBalResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ByBalResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Example) > 0 {
		for iNdEx := len(m.Example) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Example[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Student) > 0 {
		for iNdEx := len(m.Student) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Student[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Byt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Byt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Byt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Permission) > 0 {
		i -= len(m.Permission)
		copy(dAtA[i:], m.Permission)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Permission)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintCourse(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GroupListsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupListsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupListsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintCourse(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByIdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ByIdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Active) > 0 {
		i -= len(m.Active)
		copy(dAtA[i:], m.Active)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Active)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Student) > 0 {
		i -= len(m.Student)
		copy(dAtA[i:], m.Student)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Student)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Direction) > 0 {
		i -= len(m.Direction)
		copy(dAtA[i:], m.Direction)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Direction)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Teacher) > 0 {
		i -= len(m.Teacher)
		copy(dAtA[i:], m.Teacher)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Teacher)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Resp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintCourse(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListIdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListIdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintCourse(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintCourse(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListWithReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWithReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWithReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Day != 0 {
		i = encodeVarintCourse(dAtA, i, uint64(m.Day))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintCourse(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintCourse(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCourse(dAtA []byte, offset int, v uint64) int {
	offset -= sovCourse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EmptyRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Req) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Example) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithDate)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Participate)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExampleBal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithDate)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Ball)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetParticipate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.Ball != 0 {
		n += 1 + sovCourse(uint64(m.Ball))
	}
	l = len(m.WithDate)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BallCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bal) > 0 {
		for _, e := range m.Bal {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WithDate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithDate)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Ball)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WithDateParticipate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithDate)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.Participate {
		n += 2
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BalStudent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StudentId != nil {
		l = m.StudentId.Size()
		n += 1 + l + sovCourse(uint64(l))
	}
	if len(m.StudentAllBals) > 0 {
		for _, e := range m.StudentAllBals {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParticipateStudent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StudentId != nil {
		l = m.StudentId.Size()
		n += 1 + l + sovCourse(uint64(l))
	}
	if len(m.StudentAllParticipate) > 0 {
		for _, e := range m.StudentAllParticipate {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Participate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.TeacherId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.TeacherName)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.WithDate)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.BeginTime)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.CloseTime)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if len(m.ParticipateCount) > 0 {
		for _, e := range m.ParticipateCount {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Participates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Participate) > 0 {
		for _, e := range m.Participate {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BalListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GroupBals) > 0 {
		for _, e := range m.GroupBals {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParticipateListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GroupParticipate) > 0 {
		for _, e := range m.GroupParticipate {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.DateOfBegin)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.DateOfClose)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.WithDays)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.BeginTime)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.CloseTime)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Lesson)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Active)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.DirectionId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.TeacherId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if len(m.AsistentId) > 0 {
		for _, s := range m.AsistentId {
			l = len(s)
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	l = len(m.BranchId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovCourse(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.DateOfBegin)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.DateOfClose)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.WithDays)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.BeginTime)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.CloseTime)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Lesson)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Active)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.Direction != nil {
		l = m.Direction.Size()
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.Teacher != nil {
		l = m.Teacher.Size()
		n += 1 + l + sovCourse(uint64(l))
	}
	if len(m.Assistent) > 0 {
		for _, e := range m.Assistent {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if m.Branch != nil {
		l = m.Branch.Size()
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.CountStudent)
	if l > 0 {
		n += 2 + l + sovCourse(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovCourse(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Attendance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Participate)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.WithDate)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttendanceCreates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attendance) > 0 {
		for _, e := range m.Attendance {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttendanceListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attendances) > 0 {
		for _, e := range m.Attendances {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovCourse(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Assistent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.TeacherId)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *By) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ByN) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ByResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if len(m.Student) > 0 {
		for _, e := range m.Student {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if len(m.Example) > 0 {
		for _, e := range m.Example {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ByBalResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if len(m.Student) > 0 {
		for _, e := range m.Student {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if len(m.Example) > 0 {
		for _, e := range m.Example {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Byt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Permission)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovCourse(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupListsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovCourse(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovCourse(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ByIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Teacher)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Student)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Active)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Resp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovCourse(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovCourse(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovCourse(uint64(m.Limit))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListWithReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovCourse(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovCourse(uint64(m.Limit))
	}
	if m.Day != 0 {
		n += 1 + sovCourse(uint64(m.Day))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCourse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCourse(x uint64) (n int) {
	return sovCourse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmptyRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Example) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Example: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Example: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExampleBal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExampleBal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExampleBal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ball", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ball = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetParticipate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetParticipate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetParticipate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ball", wireType)
			}
			m.Ball = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ball |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BallCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BallCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BallCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bal = append(m.Bal, &Bal{})
			if err := m.Bal[len(m.Bal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithDate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithDate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithDate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ball", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ball = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithDateParticipate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithDateParticipate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithDateParticipate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Participate = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalStudent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalStudent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalStudent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StudentId == nil {
				m.StudentId = &ByN{}
			}
			if err := m.StudentId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentAllBals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentAllBals = append(m.StudentAllBals, &WithDate{})
			if err := m.StudentAllBals[len(m.StudentAllBals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipateStudent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipateStudent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipateStudent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StudentId == nil {
				m.StudentId = &ByN{}
			}
			if err := m.StudentId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentAllParticipate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentAllParticipate = append(m.StudentAllParticipate, &WithDateParticipate{})
			if err := m.StudentAllParticipate[len(m.StudentAllParticipate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Participate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Participate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Participate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeacherId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeacherName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloseTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipateCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipateCount = append(m.ParticipateCount, &Resp{})
			if err := m.ParticipateCount[len(m.ParticipateCount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Participates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Participates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Participates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participate = append(m.Participate, &Participate{})
			if err := m.Participate[len(m.Participate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupBals = append(m.GroupBals, &BalStudent{})
			if err := m.GroupBals[len(m.GroupBals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipateListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipateListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipateListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupParticipate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupParticipate = append(m.GroupParticipate, &ParticipateStudent{})
			if err := m.GroupParticipate[len(m.GroupParticipate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateOfBegin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateOfBegin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateOfClose", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateOfClose = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithDays", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithDays = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloseTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lesson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lesson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Active = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeacherId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsistentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsistentId = append(m.AsistentId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateOfBegin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateOfBegin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateOfClose", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateOfClose = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithDays", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithDays = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloseTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lesson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lesson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Active = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Direction == nil {
				m.Direction = &By{}
			}
			if err := m.Direction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teacher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Teacher == nil {
				m.Teacher = &Byt{}
			}
			if err := m.Teacher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assistent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assistent = append(m.Assistent, &Byt{})
			if err := m.Assistent[len(m.Assistent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Branch == nil {
				m.Branch = &By{}
			}
			if err := m.Branch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &By{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountStudent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountStudent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attendance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attendance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attendance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttendanceCreates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttendanceCreates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttendanceCreates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attendance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attendance = append(m.Attendance, &Attendance{})
			if err := m.Attendance[len(m.Attendance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttendanceListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttendanceListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttendanceListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attendances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attendances = append(m.Attendances, &Attendance{})
			if err := m.Attendances[len(m.Attendances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Assistent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Assistent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Assistent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeacherId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *By) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: By: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: By: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ByN) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByN: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByN: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ByResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Student = append(m.Student, &ByN{})
			if err := m.Student[len(m.Student)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Example", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Example = append(m.Example, &Example{})
			if err := m.Example[len(m.Example)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ByBalResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByBalResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByBalResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Student = append(m.Student, &ByN{})
			if err := m.Student[len(m.Student)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Example", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Example = append(m.Example, &ExampleBal{})
			if err := m.Example[len(m.Example)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Byt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Byt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Byt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupResp{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupListsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupListsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupListsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupResp{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teacher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teacher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Direction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Student = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Active = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWithReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWithReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWithReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCourse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCourse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCourse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCourse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCourse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCourse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCourse = fmt.Errorf("proto: unexpected end of group")
)
